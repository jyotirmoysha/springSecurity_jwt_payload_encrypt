#SqlQuerys
##############################################################
#Note:if added any column in getRulesNormalizationList need to add updateRulesNormalizationList also
getRulesNormalizationList=WITH cte AS ( \n\
SELECT t.PO_ID, t.WQ_ID, t.PO_SECTION, t.PO_AS_REP_LABEL, t.PO_INDEX_ORDER, t.NIL_LABEL, t.NI_ITEM,t.PO_SUBSECTION, t.PO_BREAKUP, t.PO_SUBTOTAL1, t.CUSTODIAN_NAME, t.TIME_PERIOD, t.PO_YCOORDINATES, t.PO_MERGE, t.PO_TABLE_ID, t.page_no, t.PO_CRUD_ACCOUNT, t.filing_id, t.NON_ENGLISH_LABEL, t.PO_ANCHOR, t.TEMPLATE_ID, t.REF_PO_ID, t.UPLOAD_ID, t.PO_NOTE, t.MAPPING_NAME, t.MAPPING_TYPE, t.IS_DUPLICATE, t.NI_ITEM_SUGGESTIVE, t.PO_VAL1, t.PO_VAL2, t.PO_VAL3, t.PO_VAL4, t.PO_VAL5, t.PO_VAL6, t.PO_VAL7, t.PO_VAL8, t.PO_VAL9, t.PO_VAL10, t.PO_VAL11, t.PO_VAL12, t.PO_VAL13, t.PO_VAL14, t.PO_VAL15, t.PO_VAL16, t.PO_VAL17, t.PO_VAL18, t.PO_VAL19, t.PO_VAL20, t.ACCOUNT_NUMBER, ROW_NUMBER() OVER (PARTITION BY REF_PO_ID ORDER BY REF_PO_ID, po_index_order) GroupNo,t.MODIFIED_BY \n\
FROM PARSER_OUTPUT t WHERE REF_PO_ID NOT IN (SELECT PO_ID FROM PARSER_OUTPUT) and t.filing_id=:filingId and t.PO_SECTION=:statementType and PO_CRUD_ACCOUNT <> 'D'  $DymanicSearch  UNION ALL \n\
SELECT po.PO_ID, po.WQ_ID, po.PO_SECTION, po.PO_AS_REP_LABEL, po.PO_INDEX_ORDER, po.NIL_LABEL, po.NI_ITEM, po.PO_SUBSECTION, po.PO_BREAKUP, po.PO_SUBTOTAL1, po.CUSTODIAN_NAME, po.TIME_PERIOD, po.PO_YCOORDINATES, po.PO_MERGE, po.PO_TABLE_ID, po.page_no, po.PO_CRUD_ACCOUNT, po.filing_id, po.NON_ENGLISH_LABEL, po.PO_ANCHOR, po.TEMPLATE_ID, po.REF_PO_ID, po.UPLOAD_ID, po.PO_NOTE, po.MAPPING_NAME, po.MAPPING_TYPE, po.IS_DUPLICATE, po.NI_ITEM_SUGGESTIVE, po.PO_VAL1, po.PO_VAL2, po.PO_VAL3, po.PO_VAL4, po.PO_VAL5, po.PO_VAL6, po.PO_VAL7, po.PO_VAL8, po.PO_VAL9, po.PO_VAL10, po.PO_VAL11, po.PO_VAL12, po.PO_VAL13, po.PO_VAL14, po.PO_VAL15, po.PO_VAL16, po.PO_VAL17, po.PO_VAL18, po.PO_VAL19, po.PO_VAL20, po.ACCOUNT_NUMBER, cte.GroupNo, po.MODIFIED_BY \n\
FROM PARSER_OUTPUT po INNER JOIN cte ON cte.po_id = po.REF_PO_ID where po.filing_id=:filingId and po.PO_SECTION=:statementType and po.PO_CRUD_ACCOUNT <> 'D'  $DymanicSearch), cte2 as (select *,row_number()over(order by groupno,po_index_order, po_id) rnk from cte) \n\
SELECT cte.* FROM cte,cte2 where cte.po_id=cte2.po_id and rnk between :startNum and :endNum ORDER BY cte.groupno,po_index_order 

getParentParserOutputList=select * from (SELECT t.PO_ID, t.WQ_ID, t.PO_SECTION, t.PO_AS_REP_LABEL, t.PO_INDEX_ORDER, t.NIL_LABEL, t.NI_ITEM,t.PO_SUBSECTION, t.PO_BREAKUP, t.PO_SUBTOTAL1, t.CUSTODIAN_NAME, t.TIME_PERIOD, t.PO_YCOORDINATES, t.PO_MERGE, t.PO_TABLE_ID, t.page_no, t.PO_CRUD_ACCOUNT, t.filing_id, t.NON_ENGLISH_LABEL, t.PO_ANCHOR, t.TEMPLATE_ID, t.REF_PO_ID, t.UPLOAD_ID, t.PO_NOTE, t.MAPPING_NAME, t.MAPPING_TYPE, t.IS_DUPLICATE, t.NI_ITEM_SUGGESTIVE, t.PO_VAL1, t.PO_VAL2, t.PO_VAL3, t.PO_VAL4, t.PO_VAL5, t.PO_VAL6, t.PO_VAL7, t.PO_VAL8, t.PO_VAL9, t.PO_VAL10, t.PO_VAL11, t.PO_VAL12, t.PO_VAL13, t.PO_VAL14, t.PO_VAL15, t.PO_VAL16, t.PO_VAL17, t.PO_VAL18, t.PO_VAL19, t.PO_VAL20, t.ACCOUNT_NUMBER, ROW_NUMBER() OVER (ORDER BY po_index_order) as Num,t.MODIFIED_BY  \n\
FROM PARSER_OUTPUT t WHERE REF_PO_ID =-1 and t.filing_id=:filingId and t.PO_SECTION=:statementType and t.PO_CRUD_ACCOUNT <> 'D' $DymanicSearch ) pp where Num >= :startNum  and Num < =:endNum  

getChildRecordsByRefPoId=SELECT t.PO_ID, t.WQ_ID, t.PO_SECTION, t.PO_AS_REP_LABEL, t.PO_INDEX_ORDER, t.NIL_LABEL, t.NI_ITEM,t.PO_SUBSECTION, t.PO_BREAKUP, t.PO_SUBTOTAL1, t.CUSTODIAN_NAME, t.TIME_PERIOD, t.PO_YCOORDINATES, t.PO_MERGE, t.PO_TABLE_ID, t.page_no, t.PO_CRUD_ACCOUNT, t.filing_id, t.NON_ENGLISH_LABEL, t.PO_ANCHOR, t.TEMPLATE_ID, t.REF_PO_ID, t.UPLOAD_ID, t.PO_NOTE, t.MAPPING_NAME, t.MAPPING_TYPE, t.IS_DUPLICATE, t.NI_ITEM_SUGGESTIVE, t.PO_VAL1, t.PO_VAL2, t.PO_VAL3, t.PO_VAL4, t.PO_VAL5, t.PO_VAL6, t.PO_VAL7, t.PO_VAL8, t.PO_VAL9, t.PO_VAL10, t.PO_VAL11, t.PO_VAL12, t.PO_VAL13, t.PO_VAL14, t.PO_VAL15, t.PO_VAL16, t.PO_VAL17, t.PO_VAL18, t.PO_VAL19, t.PO_VAL20, t.ACCOUNT_NUMBER, ROW_NUMBER() OVER (ORDER BY po_index_order) as Num,t.MODIFIED_BY  \n\
FROM PARSER_OUTPUT t WHERE REF_PO_ID =:refPoId and t.filing_id=:filingId and t.PO_SECTION=:statementType and t.PO_CRUD_ACCOUNT <> 'D'  $DymanicSearch

updateRulesNormalizationList=select  PO_ID, WQ_ID,PO_SECTION,PO_AS_REP_LABEL,PO_INDEX_ORDER,NIL_LABEL,NI_ITEM,PO_SUBSECTION,PO_BREAKUP, PO_SUBTOTAL1,CUSTODIAN_NAME,TIME_PERIOD, PO_YCOORDINATES,PO_MERGE,PO_TABLE_ID,page_no,PO_CRUD_ACCOUNT, filing_id,NON_ENGLISH_LABEL, PO_ANCHOR,TEMPLATE_ID,REF_PO_ID,UPLOAD_ID , PO_NOTE,MAPPING_NAME,MAPPING_TYPE , \n\
IS_DUPLICATE ,NI_ITEM_SUGGESTIVE,PO_VAL1, PO_VAL2,PO_VAL3,PO_VAL4,PO_VAL5,PO_VAL6,PO_VAL7,PO_VAL8, PO_VAL9,PO_VAL10,PO_VAL11,PO_VAL12,PO_VAL13,PO_VAL14,PO_VAL15,PO_VAL16, PO_VAL17,PO_VAL18,PO_VAL19,PO_VAL20,ACCOUNT_NUMBER,PO_MODIFIED_BY,MODIFIED_BY from PARSER_OUTPUT where PO_ID in :updatedPoids 

getAsRepLabelContextData= select  po_as_rep_label,min(po_id) po_id,po_section  from parser_output where filing_id =:filing_id  and po_section in ('IS','BS','CF')  \n\
and PO_CRUD_ACCOUNT not in ('D')  and po_as_rep_label!='' and ( REF_PO_ID is null or REF_PO_ID =-1 )  and  (PO_SUBSECTION IS NULL OR PO_SUBSECTION <>'ATTR')  \n\
group by po_as_rep_label,po_section order by case po_section  when 'IS' then 1 when 'BS' then 2   when 'CF' then 3 end

getNormalizedDataForExcel=WITH cte AS ( \n\
SELECT t.PO_INDEX_ORDER, t.PO_AS_REP_LABEL, t.NIL_LABEL, t.PO_SECTION, t.PO_BREAKUP, t.page_no, t.PO_VAL1, t.PO_VAL2, t.PO_VAL3, t.PO_VAL4, t.PO_VAL5, t.PO_VAL6, t.PO_VAL7, t.PO_VAL8, t.PO_VAL9, t.PO_VAL10, t.PO_VAL11, t.PO_VAL12, t.PO_VAL13, t.PO_VAL14, t.PO_VAL15, t.PO_VAL16, t.PO_VAL17, t.PO_VAL18, t.PO_VAL19, t.PO_VAL20, t.NON_ENGLISH_LABEL, t.po_id, t.ACCOUNT_NUMBER,ROW_NUMBER() OVER (PARTITION BY REF_PO_ID ORDER BY po_index_order,REF_PO_ID) GroupNo FROM PARSER_OUTPUT t WHERE t.REF_PO_ID NOT IN (SELECT  PO_ID FROM PARSER_OUTPUT) and t.filing_id=:filingId and t.PO_SECTION in :sectionSet and t.PO_CRUD_ACCOUNT <> 'D' \n\
UNION ALL \n\
SELECT  po.PO_INDEX_ORDER, po.PO_AS_REP_LABEL, po.NIL_LABEL, po.PO_SECTION, po.PO_BREAKUP, po.page_no, po.PO_VAL1, po.PO_VAL2, po.PO_VAL3, po.PO_VAL4, po.PO_VAL5, po.PO_VAL6, po.PO_VAL7, po.PO_VAL8, po.PO_VAL9, po.PO_VAL10, po.PO_VAL11, po.PO_VAL12, po.PO_VAL13, po.PO_VAL14, po.PO_VAL15, po.PO_VAL16, po.PO_VAL17, po.PO_VAL18, po.PO_VAL19, po.PO_VAL20, po.NON_ENGLISH_LABEL, po.po_id, po.ACCOUNT_NUMBER, cte.GroupNo FROM PARSER_OUTPUT po INNER JOIN cte ON cte.po_id = po.REF_PO_ID  where po.filing_id=:filingId and po.PO_SECTION in :sectionSet and po.PO_CRUD_ACCOUNT <> 'D' \n\
)SELECT * FROM cte ORDER BY cte.GroupNo, cte.po_index_order,cte.PO_ID

searchRulesNormalizationListByFilter1=WITH cte AS(  \n\
SELECT t.PO_ID, t.WQ_ID, t.PO_SECTION, t.PO_AS_REP_LABEL, t.PO_INDEX_ORDER, t.NIL_LABEL, t.NI_ITEM, t.PO_SUBSECTION, t.PO_BREAKUP, t.PO_SUBTOTAL1, t.CUSTODIAN_NAME, t.TIME_PERIOD, t.PO_YCOORDINATES, t.PO_MERGE, t.PO_TABLE_ID, t.page_no, t.PO_CRUD_ACCOUNT, t.filing_id, t.NON_ENGLISH_LABEL , t.PO_ANCHOR, t. TEMPLATE_ID, t.REF_PO_ID, t.UPLOAD_ID , t.PO_NOTE, t.MAPPING_NAME, t.MAPPING_TYPE , t.IS_DUPLICATE , t.NI_ITEM_SUGGESTIVE, t.PO_VAL1, t.PO_VAL2, t.PO_VAL3, t.PO_VAL4, t.PO_VAL5, t.PO_VAL6, t.PO_VAL7, t.PO_VAL8, t.PO_VAL9, t.PO_VAL10, t.PO_VAL11, t.PO_VAL12, t.PO_VAL13, t.PO_VAL14, t.PO_VAL15, t.PO_VAL16, t.PO_VAL17, t.PO_VAL18, t.PO_VAL19, t.PO_VAL20, t.ACCOUNT_NUMBER, ROW_NUMBER() OVER (PARTITION BY REF_PO_ID ORDER BY REF_PO_ID,po_index_order) GroupNo ,t.PO_MODIFIED_BY,t.MODIFIED_BY FROM  PARSER_OUTPUT t WHERE REF_PO_ID NOT IN (SELECT  PO_ID FROM PARSER_OUTPUT) and t.filing_id=:filingId and t.PO_SECTION=:statementType   and t.PO_CRUD_ACCOUNT <> 'D'  
searchRulesNormalizationListByFilter2=UNION ALL \n\
SELECT po.PO_ID,po.WQ_ID,po.PO_SECTION,po.PO_AS_REP_LABEL,po.PO_INDEX_ORDER,po.NIL_LABEL,po.NI_ITEM,po.PO_SUBSECTION,po.PO_BREAKUP,po.PO_SUBTOTAL1,po.CUSTODIAN_NAME, po.TIME_PERIOD,po.PO_YCOORDINATES,po.PO_MERGE,po.PO_TABLE_ID,po.page_no, po.PO_CRUD_ACCOUNT,po.filing_id,po. NON_ENGLISH_LABEL ,po.PO_ANCHOR,po. TEMPLATE_ID, po.REF_PO_ID,po.UPLOAD_ID ,po.PO_NOTE,po.MAPPING_NAME,po.MAPPING_TYPE ,po.IS_DUPLICATE ,po.NI_ITEM_SUGGESTIVE,po.PO_VAL1,po.PO_VAL2,po.PO_VAL3,po.PO_VAL4, po.PO_VAL5, po.PO_VAL6,po.PO_VAL7,po.PO_VAL8,po.PO_VAL9,po.PO_VAL10,po.PO_VAL11,po.PO_VAL12,po.PO_VAL13,po.PO_VAL14,po.PO_VAL15,po.PO_VAL16,po.PO_VAL17, po.PO_VAL18,po.PO_VAL19,po.PO_VAL20,po.ACCOUNT_NUMBER, cte.GroupNo ,po.PO_MODIFIED_BY,po.MODIFIED_BY   FROM PARSER_OUTPUT po INNER JOIN cte ON cte.po_id = po.REF_PO_ID  where po.filing_id=:filingId and po.PO_SECTION=:statementType and po.PO_CRUD_ACCOUNT <> 'D'  
searchRulesNormalizationListByFilter3=),cte2 as (select *,row_number()over(order by groupno,po_index_order, po_id) rnk  from cte) SELECT cte.*  FROM cte,cte2 where cte.po_id=cte2.po_id and rnk between :startNum and :endNum ORDER BY cte.groupno,po_index_order

getParserOutPutForQAChecks=WITH cte AS ( \n\
SELECT t.PO_ID, t.WQ_ID, t.PO_SECTION, t.PO_AS_REP_LABEL, t.PO_INDEX_ORDER, t.NIL_LABEL, t.NI_ITEM, t.PO_SUBSECTION, t.PO_BREAKUP, t.PO_SUBTOTAL1, t.CUSTODIAN_NAME, t.TIME_PERIOD, t.PO_YCOORDINATES, t.PO_MERGE, t.PO_TABLE_ID, t.page_no, t.PO_CRUD_ACCOUNT, t.filing_id, t.NON_ENGLISH_LABEL , t.PO_ANCHOR, t.TEMPLATE_ID, t.REF_PO_ID, t.UPLOAD_ID , t.PO_NOTE, t.MAPPING_NAME, t.MAPPING_TYPE , t.IS_DUPLICATE , t.NI_ITEM_SUGGESTIVE, t.PO_VAL1, t.PO_VAL2, t.PO_VAL3, t.PO_VAL4, t.PO_VAL5, t.PO_VAL6, t.PO_VAL7, t.PO_VAL8, t.PO_VAL9, t.PO_VAL10, t.PO_VAL11, t.PO_VAL12, t.PO_VAL13, t.PO_VAL14, t.PO_VAL15, t.PO_VAL16, t.PO_VAL17, t.PO_VAL18, t.PO_VAL19, t.PO_VAL20, t.ACCOUNT_NUMBER, ROW_NUMBER() OVER (PARTITION BY REF_PO_ID ORDER BY po_index_order,REF_PO_ID) GroupNo,t.MODIFIED_BY FROM  PARSER_OUTPUT t WHERE   REF_PO_ID NOT IN (SELECT  PO_ID FROM PARSER_OUTPUT) and t.filing_id=:filingId and t.PO_SECTION=:statementType and t.MODIFIED_BY IS NOT NULL and t.PO_CRUD_ACCOUNT <> 'D' \n\
UNION ALL \n\
SELECT po.PO_ID,po.WQ_ID,po.PO_SECTION,po.PO_AS_REP_LABEL,po.PO_INDEX_ORDER,po.NIL_LABEL,po.NI_ITEM,po.PO_SUBSECTION,po.PO_BREAKUP,po.PO_SUBTOTAL1,po.CUSTODIAN_NAME, po.TIME_PERIOD,po.PO_YCOORDINATES,po.PO_MERGE,po.PO_TABLE_ID,po.page_no, po.PO_CRUD_ACCOUNT,po.filing_id,po.NON_ENGLISH_LABEL ,po.PO_ANCHOR,po.TEMPLATE_ID, po.REF_PO_ID,po.UPLOAD_ID ,po.PO_NOTE,po.MAPPING_NAME,po.MAPPING_TYPE ,po.IS_DUPLICATE ,po.NI_ITEM_SUGGESTIVE,po.PO_VAL1,po.PO_VAL2,po.PO_VAL3,po.PO_VAL4, po.PO_VAL5, po.PO_VAL6,po.PO_VAL7,po.PO_VAL8,po.PO_VAL9,po.PO_VAL10,po.PO_VAL11,po.PO_VAL12,po.PO_VAL13,po.PO_VAL14,po.PO_VAL15,po.PO_VAL16,po.PO_VAL17, po.PO_VAL18,po.PO_VAL19,po.PO_VAL20,po.ACCOUNT_NUMBER, cte.GroupNo,po.MODIFIED_BY FROM PARSER_OUTPUT po INNER JOIN cte ON cte.po_id = po.REF_PO_ID  where po.filing_id=:filingId and po.PO_SECTION=:statementType and po.MODIFIED_BY IS NOT NULL and po.PO_CRUD_ACCOUNT <> 'D' \n\
)SELECT * FROM cte ORDER BY cte.GroupNo, cte.po_index_order,cte.PO_ID

getParserOutPutForQAChecksBreakup=WITH cte AS ( \n\
SELECT t.PO_ID, t.WQ_ID, t.PO_SECTION, t.PO_AS_REP_LABEL, t.PO_INDEX_ORDER, t.NIL_LABEL, t.NI_ITEM, t.PO_SUBSECTION, t.PO_BREAKUP, t.PO_SUBTOTAL1, t.CUSTODIAN_NAME, t.TIME_PERIOD, t.PO_YCOORDINATES, t.PO_MERGE, t.PO_TABLE_ID, t.page_no, t.PO_CRUD_ACCOUNT, t.filing_id, t.NON_ENGLISH_LABEL , t.PO_ANCHOR, t.TEMPLATE_ID, t.REF_PO_ID, t.UPLOAD_ID , t.PO_NOTE, t.MAPPING_NAME, t.MAPPING_TYPE , t.IS_DUPLICATE , t.NI_ITEM_SUGGESTIVE, t.PO_VAL1, t.PO_VAL2, t.PO_VAL3, t.PO_VAL4, t.PO_VAL5, t.PO_VAL6, t.PO_VAL7, t.PO_VAL8, t.PO_VAL9, t.PO_VAL10, t.PO_VAL11, t.PO_VAL12, t.PO_VAL13, t.PO_VAL14, t.PO_VAL15, t.PO_VAL16, t.PO_VAL17, t.PO_VAL18, t.PO_VAL19, t.PO_VAL20, t.ACCOUNT_NUMBER, ROW_NUMBER() OVER (PARTITION BY REF_PO_ID ORDER BY po_index_order,REF_PO_ID) GroupNo,t.MODIFIED_BY FROM  PARSER_OUTPUT t WHERE   REF_PO_ID NOT IN (SELECT  PO_ID FROM PARSER_OUTPUT) and t.filing_id=:filingId and t.PO_SECTION=:statementType and (t.MODIFIED_BY IS NOT NULL and t.MODIFIED_BY =:modifiedBy)  and t.PO_CRUD_ACCOUNT <> 'D' \n\
UNION ALL \n\
SELECT po.PO_ID,po.WQ_ID,po.PO_SECTION,po.PO_AS_REP_LABEL,po.PO_INDEX_ORDER,po.NIL_LABEL,po.NI_ITEM,po.PO_SUBSECTION,po.PO_BREAKUP,po.PO_SUBTOTAL1,po.CUSTODIAN_NAME, po.TIME_PERIOD,po.PO_YCOORDINATES,po.PO_MERGE,po.PO_TABLE_ID,po.page_no, po.PO_CRUD_ACCOUNT,po.filing_id,po.NON_ENGLISH_LABEL ,po.PO_ANCHOR,po.TEMPLATE_ID, po.REF_PO_ID,po.UPLOAD_ID ,po.PO_NOTE,po.MAPPING_NAME,po.MAPPING_TYPE ,po.IS_DUPLICATE ,po.NI_ITEM_SUGGESTIVE,po.PO_VAL1,po.PO_VAL2,po.PO_VAL3,po.PO_VAL4, po.PO_VAL5, po.PO_VAL6,po.PO_VAL7,po.PO_VAL8,po.PO_VAL9,po.PO_VAL10,po.PO_VAL11,po.PO_VAL12,po.PO_VAL13,po.PO_VAL14,po.PO_VAL15,po.PO_VAL16,po.PO_VAL17, po.PO_VAL18,po.PO_VAL19,po.PO_VAL20,po.ACCOUNT_NUMBER, cte.GroupNo,po.MODIFIED_BY FROM PARSER_OUTPUT po INNER JOIN cte ON cte.po_id = po.REF_PO_ID  where po.filing_id=:filingId and po.PO_SECTION=:statementType and (po.MODIFIED_BY IS NOT NULL and po.MODIFIED_BY =:modifiedBy) and po.PO_CRUD_ACCOUNT <> 'D' \n\
)SELECT * FROM cte ORDER BY cte.GroupNo, cte.po_index_order,cte.PO_ID


#Below Query used for show data on QA Checklist page popup
getRulesNormalizationListForNormQAChecks=WITH cte AS \n\
( \n\
SELECT t.PO_ID, t.WQ_ID, t.PO_SECTION, t.PO_AS_REP_LABEL, t.PO_INDEX_ORDER, t.NIL_LABEL, t.NI_ITEM, t.PO_SUBSECTION, t.PO_BREAKUP, t.PO_SUBTOTAL1, t.CUSTODIAN_NAME, t.TIME_PERIOD, t.PO_YCOORDINATES, t.PO_MERGE, t.PO_TABLE_ID, t.page_no, t.PO_CRUD_ACCOUNT, t.filing_id, t.NON_ENGLISH_LABEL , t.PO_ANCHOR, t.TEMPLATE_ID, t.REF_PO_ID, t.UPLOAD_ID , t.PO_NOTE, t.MAPPING_NAME, t.MAPPING_TYPE , t.IS_DUPLICATE , t.NI_ITEM_SUGGESTIVE, t.PO_VAL1, t.PO_VAL2, t.PO_VAL3, t.PO_VAL4, t.PO_VAL5, t.PO_VAL6, t.PO_VAL7, t.PO_VAL8, t.PO_VAL9, t.PO_VAL10, t.PO_VAL11, t.PO_VAL12, t.PO_VAL13, t.PO_VAL14, t.PO_VAL15, t.PO_VAL16, t.PO_VAL17, t.PO_VAL18, t.PO_VAL19, t.PO_VAL20, t.ACCOUNT_NUMBER, ROW_NUMBER() OVER (PARTITION BY REF_PO_ID ORDER BY po_index_order,REF_PO_ID) GroupNo,t.MODIFIED_BY FROM  PARSER_OUTPUT t WHERE   REF_PO_ID NOT IN (SELECT  PO_ID FROM PARSER_OUTPUT) and t.filing_id=:filingId and t.PO_SECTION=:statementType  $:notNullColumns1  and t.PO_CRUD_ACCOUNT <> 'D' and t.PO_AS_REP_LABEL is not null and t.NI_ITEM_SUGGESTIVE is null and t.NI_ITEM is null and t.PO_SUBSECTION <> 'ATTR' \n\
UNION ALL \n\
SELECT po.PO_ID,po.WQ_ID,po.PO_SECTION,po.PO_AS_REP_LABEL,po.PO_INDEX_ORDER,po.NIL_LABEL,po.NI_ITEM,po.PO_SUBSECTION,po.PO_BREAKUP,po.PO_SUBTOTAL1,po.CUSTODIAN_NAME, po.TIME_PERIOD,po.PO_YCOORDINATES,po.PO_MERGE,po.PO_TABLE_ID,po.page_no, po.PO_CRUD_ACCOUNT,po.filing_id,po.NON_ENGLISH_LABEL ,po.PO_ANCHOR,po.TEMPLATE_ID, po.REF_PO_ID,po.UPLOAD_ID ,po.PO_NOTE,po.MAPPING_NAME,po.MAPPING_TYPE ,po.IS_DUPLICATE ,po.NI_ITEM_SUGGESTIVE,po.PO_VAL1,po.PO_VAL2,po.PO_VAL3,po.PO_VAL4, po.PO_VAL5, po.PO_VAL6,po.PO_VAL7,po.PO_VAL8,po.PO_VAL9,po.PO_VAL10,po.PO_VAL11,po.PO_VAL12,po.PO_VAL13,po.PO_VAL14,po.PO_VAL15,po.PO_VAL16,po.PO_VAL17, po.PO_VAL18,po.PO_VAL19,po.PO_VAL20,po.ACCOUNT_NUMBER, cte.GroupNo,po.MODIFIED_BY FROM PARSER_OUTPUT po INNER JOIN cte ON cte.po_id = po.REF_PO_ID  where po.filing_id=:filingId  and po.PO_SECTION=:statementType  $:notNullColumns2   and po.PO_CRUD_ACCOUNT <> 'D' and po.PO_AS_REP_LABEL is not null and po.NI_ITEM_SUGGESTIVE is null and po.NI_ITEM is null and po.PO_SUBSECTION <> 'ATTR' \n\
)SELECT * FROM cte ORDER BY cte.GroupNo, cte.po_index_order,cte.PO_ID OFFSET :FirstResult ROWS FETCH NEXT :MaxResults ROWS ONLY

getRulesNormalizationListForNormQAChecksBySubSection=WITH cte AS \n\
( \n\
SELECT t.PO_ID, t.WQ_ID, t.PO_SECTION, t.PO_AS_REP_LABEL, t.PO_INDEX_ORDER, t.NIL_LABEL, t.NI_ITEM, t.PO_SUBSECTION, t.PO_BREAKUP, t.PO_SUBTOTAL1, t.CUSTODIAN_NAME, t.TIME_PERIOD, t.PO_YCOORDINATES, t.PO_MERGE, t.PO_TABLE_ID, t.page_no, t.PO_CRUD_ACCOUNT, t.filing_id, t.NON_ENGLISH_LABEL , t.PO_ANCHOR, t.TEMPLATE_ID, t.REF_PO_ID, t.UPLOAD_ID , t.PO_NOTE, t.MAPPING_NAME, t.MAPPING_TYPE , t.IS_DUPLICATE , t.NI_ITEM_SUGGESTIVE, t.PO_VAL1, t.PO_VAL2, t.PO_VAL3, t.PO_VAL4, t.PO_VAL5, t.PO_VAL6, t.PO_VAL7, t.PO_VAL8, t.PO_VAL9, t.PO_VAL10, t.PO_VAL11, t.PO_VAL12, t.PO_VAL13, t.PO_VAL14, t.PO_VAL15, t.PO_VAL16, t.PO_VAL17, t.PO_VAL18, t.PO_VAL19, t.PO_VAL20, t.ACCOUNT_NUMBER, ROW_NUMBER() OVER (PARTITION BY REF_PO_ID ORDER BY po_index_order,REF_PO_ID) GroupNo,t.MODIFIED_BY FROM  PARSER_OUTPUT t WHERE   REF_PO_ID NOT IN (SELECT  PO_ID FROM PARSER_OUTPUT) and t.filing_id=:filingId and t.PO_SECTION=:statementType  $:notNullColumns1  and t.PO_CRUD_ACCOUNT <> 'D' and t.PO_AS_REP_LABEL is not null and t.NI_ITEM_SUGGESTIVE is null and t.NI_ITEM is null and t.PO_SUBSECTION in (:subSectionList) \n\
UNION ALL \n\
SELECT po.PO_ID,po.WQ_ID,po.PO_SECTION,po.PO_AS_REP_LABEL,po.PO_INDEX_ORDER,po.NIL_LABEL,po.NI_ITEM,po.PO_SUBSECTION,po.PO_BREAKUP,po.PO_SUBTOTAL1,po.CUSTODIAN_NAME, po.TIME_PERIOD,po.PO_YCOORDINATES,po.PO_MERGE,po.PO_TABLE_ID,po.page_no, po.PO_CRUD_ACCOUNT,po.filing_id,po.NON_ENGLISH_LABEL ,po.PO_ANCHOR,po.TEMPLATE_ID, po.REF_PO_ID,po.UPLOAD_ID ,po.PO_NOTE,po.MAPPING_NAME,po.MAPPING_TYPE ,po.IS_DUPLICATE ,po.NI_ITEM_SUGGESTIVE,po.PO_VAL1,po.PO_VAL2,po.PO_VAL3,po.PO_VAL4, po.PO_VAL5, po.PO_VAL6,po.PO_VAL7,po.PO_VAL8,po.PO_VAL9,po.PO_VAL10,po.PO_VAL11,po.PO_VAL12,po.PO_VAL13,po.PO_VAL14,po.PO_VAL15,po.PO_VAL16,po.PO_VAL17, po.PO_VAL18,po.PO_VAL19,po.PO_VAL20,po.ACCOUNT_NUMBER, cte.GroupNo,po.MODIFIED_BY FROM PARSER_OUTPUT po INNER JOIN cte ON cte.po_id = po.REF_PO_ID where po.filing_id=:filingId and po.PO_SECTION=:statementType $:notNullColumns2  and po.PO_CRUD_ACCOUNT <> 'D' and po.PO_AS_REP_LABEL is not null and po.NI_ITEM_SUGGESTIVE is null and po.NI_ITEM is null and po.PO_SUBSECTION in (:subSectionList) \n\
)SELECT * FROM cte ORDER BY cte.GroupNo, cte.po_index_order,cte.PO_ID


getRulesNormalizationListForNormQAChecksBySubSectionClientSpecific=WITH cte AS \n\
( \n\
SELECT t.PO_ID, t.WQ_ID, t.PO_SECTION, t.PO_AS_REP_LABEL, t.PO_INDEX_ORDER, t.NIL_LABEL, t.NI_ITEM, t.PO_SUBSECTION, t.PO_BREAKUP, t.PO_SUBTOTAL1, t.CUSTODIAN_NAME, t.TIME_PERIOD, t.PO_YCOORDINATES, t.PO_MERGE, t.PO_TABLE_ID, t.page_no, t.PO_CRUD_ACCOUNT, t.filing_id, t.NON_ENGLISH_LABEL , t.PO_ANCHOR, t.TEMPLATE_ID, t.REF_PO_ID, t.UPLOAD_ID , t.PO_NOTE, t.MAPPING_NAME, t.MAPPING_TYPE , t.IS_DUPLICATE , t.NI_ITEM_SUGGESTIVE, t.PO_VAL1, t.PO_VAL2, t.PO_VAL3, t.PO_VAL4, t.PO_VAL5, t.PO_VAL6, t.PO_VAL7, t.PO_VAL8, t.PO_VAL9, t.PO_VAL10, t.PO_VAL11, t.PO_VAL12, t.PO_VAL13, t.PO_VAL14, t.PO_VAL15, t.PO_VAL16, t.PO_VAL17, t.PO_VAL18, t.PO_VAL19, t.PO_VAL20, t.ACCOUNT_NUMBER, ROW_NUMBER() OVER (PARTITION BY REF_PO_ID ORDER BY po_index_order,REF_PO_ID) GroupNo,t.MODIFIED_BY FROM  PARSER_OUTPUT t WHERE   REF_PO_ID NOT IN (SELECT  PO_ID FROM PARSER_OUTPUT) and t.filing_id=:filingId and t.PO_SECTION=:statementType  $:notNullColumns1  and t.PO_CRUD_ACCOUNT <> 'D' and t.PO_AS_REP_LABEL is not null and t.PO_SUBSECTION in (:subSectionList) \n\
UNION ALL \n\
SELECT po.PO_ID,po.WQ_ID,po.PO_SECTION,po.PO_AS_REP_LABEL,po.PO_INDEX_ORDER,po.NIL_LABEL,po.NI_ITEM,po.PO_SUBSECTION,po.PO_BREAKUP,po.PO_SUBTOTAL1,po.CUSTODIAN_NAME, po.TIME_PERIOD,po.PO_YCOORDINATES,po.PO_MERGE,po.PO_TABLE_ID,po.page_no, po.PO_CRUD_ACCOUNT,po.filing_id,po.NON_ENGLISH_LABEL ,po.PO_ANCHOR,po.TEMPLATE_ID, po.REF_PO_ID,po.UPLOAD_ID ,po.PO_NOTE,po.MAPPING_NAME,po.MAPPING_TYPE ,po.IS_DUPLICATE ,po.NI_ITEM_SUGGESTIVE,po.PO_VAL1,po.PO_VAL2,po.PO_VAL3,po.PO_VAL4, po.PO_VAL5, po.PO_VAL6,po.PO_VAL7,po.PO_VAL8,po.PO_VAL9,po.PO_VAL10,po.PO_VAL11,po.PO_VAL12,po.PO_VAL13,po.PO_VAL14,po.PO_VAL15,po.PO_VAL16,po.PO_VAL17, po.PO_VAL18,po.PO_VAL19,po.PO_VAL20,po.ACCOUNT_NUMBER, cte.GroupNo,po.MODIFIED_BY FROM PARSER_OUTPUT po INNER JOIN cte ON cte.po_id = po.REF_PO_ID where po.filing_id=:filingId and po.PO_SECTION=:statementType $:notNullColumns2  and po.PO_CRUD_ACCOUNT <> 'D' and po.PO_AS_REP_LABEL is not null and po.PO_SUBSECTION in (:subSectionList) \n\
)SELECT * FROM cte ORDER BY cte.GroupNo, cte.po_index_order,cte.PO_ID


getCountRulesNormalizationListForNormQAChecks=WITH cte AS \n\
( \n\
SELECT t.PO_ID, t.WQ_ID, t.PO_SECTION, t.PO_AS_REP_LABEL, t.PO_INDEX_ORDER, t.NIL_LABEL, t.NI_ITEM, t.PO_SUBSECTION, t.PO_BREAKUP, t.PO_SUBTOTAL1, t.CUSTODIAN_NAME, t.TIME_PERIOD, t.PO_YCOORDINATES, t.PO_MERGE, t.PO_TABLE_ID, t.page_no, t.PO_CRUD_ACCOUNT, t.filing_id, t.NON_ENGLISH_LABEL , t.PO_ANCHOR, t.TEMPLATE_ID, t.REF_PO_ID, t.UPLOAD_ID , t.PO_NOTE, t.MAPPING_NAME, t.MAPPING_TYPE , t.IS_DUPLICATE , t.NI_ITEM_SUGGESTIVE, t.PO_VAL1, t.PO_VAL2, t.PO_VAL3, t.PO_VAL4, t.PO_VAL5, t.PO_VAL6, t.PO_VAL7, t.PO_VAL8, t.PO_VAL9, t.PO_VAL10, t.PO_VAL11, t.PO_VAL12, t.PO_VAL13, t.PO_VAL14, t.PO_VAL15, t.PO_VAL16, t.PO_VAL17, t.PO_VAL18, t.PO_VAL19, t.PO_VAL20, t.ACCOUNT_NUMBER, ROW_NUMBER() OVER (PARTITION BY REF_PO_ID ORDER BY po_index_order,REF_PO_ID) GroupNo,t.MODIFIED_BY FROM  PARSER_OUTPUT t WHERE   REF_PO_ID NOT IN (SELECT  PO_ID FROM PARSER_OUTPUT) and t.filing_id=:filingId and t.PO_SECTION=:statementType  $:notNullColumns1 and t.PO_CRUD_ACCOUNT <> 'D' and t.PO_AS_REP_LABEL is not null and t.NI_ITEM_SUGGESTIVE is null and t.NI_ITEM is null and t.PO_SUBSECTION <> 'ATTR' \n\
UNION ALL \n\
SELECT po.PO_ID,po.WQ_ID,po.PO_SECTION,po.PO_AS_REP_LABEL,po.PO_INDEX_ORDER,po.NIL_LABEL,po.NI_ITEM,po.PO_SUBSECTION,po.PO_BREAKUP,po.PO_SUBTOTAL1,po.CUSTODIAN_NAME, po.TIME_PERIOD,po.PO_YCOORDINATES,po.PO_MERGE,po.PO_TABLE_ID,po.page_no, po.PO_CRUD_ACCOUNT,po.filing_id,po.NON_ENGLISH_LABEL ,po.PO_ANCHOR,po.TEMPLATE_ID, po.REF_PO_ID,po.UPLOAD_ID ,po.PO_NOTE,po.MAPPING_NAME,po.MAPPING_TYPE ,po.IS_DUPLICATE ,po.NI_ITEM_SUGGESTIVE,po.PO_VAL1,po.PO_VAL2,po.PO_VAL3,po.PO_VAL4, po.PO_VAL5, po.PO_VAL6,po.PO_VAL7,po.PO_VAL8,po.PO_VAL9,po.PO_VAL10,po.PO_VAL11,po.PO_VAL12,po.PO_VAL13,po.PO_VAL14,po.PO_VAL15,po.PO_VAL16,po.PO_VAL17, po.PO_VAL18,po.PO_VAL19,po.PO_VAL20,po.ACCOUNT_NUMBER, cte.GroupNo,po.MODIFIED_BY FROM PARSER_OUTPUT po INNER JOIN cte ON cte.po_id = po.REF_PO_ID  where po.filing_id=:filingId and po.PO_SECTION=:statementType $:notNullColumns2 and po.PO_CRUD_ACCOUNT <> 'D' and po.PO_AS_REP_LABEL is not null and po.NI_ITEM_SUGGESTIVE is null and po.NI_ITEM is null and po.PO_SUBSECTION <> 'ATTR' \n\
) SELECT count(*) FROM cte


getAsRepStatementByFilingIdAuditFlag=select distinct CONVERT(VARCHAR(10),asrep.ars_date,101) ars_date,min(asrep.ars_id) ars_id,asrep.FILING_ID,asrep.ARS_STMT_YEAR,asrep.ARS_PERIOD,asrep.ARS_AUDIT_FLAG \n\
 from AS_REP_STATEMENT asrep where asrep.FILING_ID=:filingId group by ars_date,asrep.FILING_ID,asrep.ARS_STMT_YEAR,asrep.ARS_PERIOD,asrep.ARS_AUDIT_FLAG order by ars_date desc 
getStatementYearForNormQAChecks=SELECT po.PO_ID, po.WQ_ID, po.PO_SECTION, po.PO_AS_REP_LABEL, po.PO_INDEX_ORDER, po.NIL_LABEL, po.NI_ITEM, po.PO_SUBSECTION, po.PO_BREAKUP, po.PO_SUBTOTAL1, po.CUSTODIAN_NAME, po.TIME_PERIOD, po.PO_YCOORDINATES, po.PO_MERGE, po.PO_TABLE_ID, po.page_no, po.PO_CRUD_ACCOUNT, po.filing_id, po.NON_ENGLISH_LABEL , po.PO_ANCHOR, po.TEMPLATE_ID, po.REF_PO_ID, po.UPLOAD_ID , po.PO_NOTE, po.MAPPING_NAME, po.MAPPING_TYPE , po.IS_DUPLICATE , po.NI_ITEM_SUGGESTIVE, po.PO_VAL1, po.PO_VAL2, po.PO_VAL3, po.PO_VAL4, po.PO_VAL5, po.PO_VAL6, po.PO_VAL7, po.PO_VAL8, po.PO_VAL9, po.PO_VAL10, po.PO_VAL11, po.PO_VAL12, po.PO_VAL13, po.PO_VAL14, po.PO_VAL15, po.PO_VAL16, po.PO_VAL17, po.PO_VAL18, po.PO_VAL19, po.PO_VAL20, po.ACCOUNT_NUMBER, ROW_NUMBER() OVER (PARTITION BY REF_PO_ID ORDER BY po_index_order,REF_PO_ID) GroupNo,po.MODIFIED_BY FROM  PARSER_OUTPUT po WHERE  po.FILING_ID =:filingId and po.PO_SECTION = :poSection and po.PO_AS_REP_LABEL = 'STATEMENT YEAR'
 