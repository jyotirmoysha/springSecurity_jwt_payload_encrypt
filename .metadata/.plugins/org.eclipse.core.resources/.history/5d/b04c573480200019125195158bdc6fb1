package com.livespread.common.service;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.net.URLDecoder;
import java.util.Properties;

import javax.servlet.ServletContext;
import javax.servlet.ServletContextEvent;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;


public class CustomContextListener extends org.springframework.web.context.ContextLoaderListener
    {
      
      static Log log = LogFactory.getLog(CustomContextListener.class);
      public String appenderPath;
      
  
  public String getDirectory(String strDirectory)
  {
        String strValue = strDirectory;
        return strValue+"/application.properties";
  }

  public void contextDestroyed(ServletContextEvent event)
  {
    super.contextDestroyed(event);
  }

  public void contextInitialized(ServletContextEvent event)
  {
        ServletContext servletContext = event.getServletContext();
        /**
         * This object used for user input properties file
         */
        Properties inputProperties=new Properties();
            try
            {     
                  

                  String strDirectory  = CustomContextListener.class.getClassLoader().getResource("application.properties").toString();
                  log.info("Working directory path=="+strDirectory);
                  strDirectory = URLDecoder.decode(strDirectory, "UTF-8");
                  log.info("Working directory path=="+strDirectory);
                  String serverName =servletContext.getServerInfo();

                  if(serverName.contains("JBoss")){
                        strDirectory=strDirectory.substring(5,strDirectory.lastIndexOf('/'));
                  }else{
                  char toCheck = ':';
                    int count = 0;
                  for (int i = 0; i < strDirectory.length(); i++) {
                            if (strDirectory.charAt(i) == toCheck) {
                                count++;
                            }
                  }
                  if(count>1){
                  strDirectory=strDirectory.substring(6,strDirectory.lastIndexOf('/'));
                  }else{
                  strDirectory=strDirectory.substring(5,strDirectory.lastIndexOf('/'));      
                   }
                  }//server if end 
                  
                   log.info("strDirectory="+strDirectory);
                   /** Here we get input.properties file from context path in webapp folder**/
                   String inputPropertiesFilePath= strDirectory.substring(0, strDirectory.substring(0, strDirectory.lastIndexOf("/")).lastIndexOf("/")+1);
     			   inputPropertiesFilePath = inputPropertiesFilePath.substring(0, inputPropertiesFilePath.substring(0, inputPropertiesFilePath.lastIndexOf("/")).lastIndexOf("/")+1);
     			   try{
     			 // if input.properties file not exist 
     			 InputStream userinput =new FileInputStream(new File(inputPropertiesFilePath+"input.properties").getCanonicalFile());
     			 inputProperties.load(userinput);
     			 String homeResourcePath=inputProperties.getProperty("HOME_RESOURCE_PATH");
     			 String[] homePathArray = homeResourcePath.split("LIVESPREAD-FS");
     			 String homePath=homePathArray[0]+"LIVESPREAD-FS";
     			 PropertiesFileWriterUtility.f_writeJDBCPropertiesFile("jdbc.properties",inputProperties,strDirectory);
                 PropertiesFileWriterUtility.f_writeApplicationPropertiesFile("application.properties",inputProperties,strDirectory,homeResourcePath,homePath);
                 String loggerFilePath="";
                 if(inputProperties.getProperty("LogFilePath")!=null)
                 loggerFilePath=inputProperties.getProperty("LogFilePath");
                 PropertiesFileWriterUtility.f_writeLogPropertiesFile("log4j.properties",strDirectory,loggerFilePath);
                 PropertiesFileWriterUtility.f_writeEmailPropertiesFile("email.properties",inputProperties,strDirectory);
     			  }catch(FileNotFoundException fne){
     				   fne.getMessage();
     				   fne.printStackTrace();
     				   log.error(fne.getMessage());
     			  }
                    
                   

                    System.out.println("code executed after catch");            
                   
            }
            catch(Exception ex)
            {
                  log.error("Error while building properties file", ex);
                  ex.printStackTrace();
            }
            
            super.contextInitialized(event);

  }
}

