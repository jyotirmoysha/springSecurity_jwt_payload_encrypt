package com.livespread.controller;

import java.io.File;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.livespread.command.NormalisedLabelAndValues;
import com.livespread.service.CRTemplateService;
import com.livespread.service.NormalizationService;
import com.livespread.util.CipherUtils;

@Controller
public class CRExportTemplateController {

	@Value("${clientSpecificCustomTempleteFilePath.path}")
	private String clientSpecificCustomTempleteFilePath;

	@Value("${clientSpecificCustomTemplateDownloadedPath.path}")
	private String clientSpecificCustomTemplateDownloadedPath;

	@Autowired
	private NormalizationService normalizationService;

	@Autowired
	private CRTemplateService crTemplateService;
	
	private Logger LOGGER = Logger.getLogger(CRExportTemplateController.class);

	@RequestMapping(value = "/downloadCRTemplate.htm", method = {
			RequestMethod.GET, RequestMethod.POST })
	public String downloadCRTemplate(
			@RequestParam("customerId") String customerId,
			@RequestParam("fillingId") String fillingId,
			@RequestParam("WqId") String wqId,
			@RequestParam("customerName") String customerName1,
			@RequestParam("businessName") String businessName, String fileName,
			@RequestParam("compIdOrCik") String compIdOrCik,
			@RequestParam("oparationName") String oparationName, Model map,
			HttpSession session, HttpServletResponse response,
			HttpServletRequest request,RedirectAttributes redirectAttributes) {
		File file = null;
		try {
			String customerName = CipherUtils.decrypt(customerName1);
			Integer decryptedFillingId = Integer.parseInt(CipherUtils
					.decrypt(fillingId));
			Integer decryptedCustomerId = Integer.parseInt(CipherUtils
					.decrypt(customerId));
			Integer decryptedWqId = Integer.parseInt(CipherUtils.decrypt(wqId));
			
			customerName = customerName.replaceAll(" ", "-");
			/*
			 * Here if customer name has ',' then there is issue in chrome
			 * browser thats why we replace ',' by -
			 */
			customerName = customerName.replaceAll(",", "-");
			LOGGER.info("** start-downloadCRTemplate methode");

			Map<String, List<NormalisedLabelAndValues>> listOfNormalzedLabelsDetails = null;
			Map<String, List<String>> mapOfHeaders;
			mapOfHeaders = normalizationService.getHeaderDetails(decryptedFillingId, decryptedCustomerId, decryptedWqId,"IS",false);

			Map<String, Object> mapOfHeadersCR= crTemplateService.getHeaderDetailsForCRTemplate(decryptedFillingId);
			listOfNormalzedLabelsDetails = normalizationService.getNormalzedLabelsDetails(decryptedFillingId,decryptedCustomerId, decryptedWqId, mapOfHeaders);
			crTemplateService.downloadCRTemplateForClient(listOfNormalzedLabelsDetails, oparationName, customerName,clientSpecificCustomTemplateDownloadedPath, clientSpecificCustomTempleteFilePath, mapOfHeadersCR);
			file = new File(clientSpecificCustomTemplateDownloadedPath + customerName + ".xlsx").getCanonicalFile();
			response.setHeader("Content-Disposition", "attachment; filename="+ customerName + ".xlsx");

			
			// CR Template 
			

		/*	
		  crTempletedDirectory.path=/home/rage/LIVESPREAD-FS/LSSQL/dev/Datafiles/CRTemplate/New-Corporate-LS1.xlsm
		  crTemplateDownloadedPath.path=/home/rage/LIVESPREAD-FS/LSSQL/dev/Datafiles/CRTemplate/
		  listOfNormalzedLabelsDetails = normalizationService.getNormalzedLabelsDetails(decryptedFillingId,decryptedCustomerId, decryptedWqId, mapOfHeaders);
			normalizationService.downloadCRTemplate(listOfNormalzedLabelsDetails, oparationName,customerName, DownloadedCRTemplatePath,CRTemplateFilePath, mapOfHeaders);
			file = new File(DownloadedCRTemplatePath + customerName + ".xlsm").getCanonicalFile();
			response.setHeader("Content-Disposition", "attachment; filename="+ customerName + ".xlsm");
		 */		
			
			
			redirectAttributes.addAttribute("fileNameWithPath", file);
			LOGGER.info("** End-downloadCRTemplate methode");
		} catch (Exception e) {
			LOGGER.error("Error:",e);
			e.printStackTrace();
		} 
		 return "redirect:/downloadFileByPath.htm";

	}
}
