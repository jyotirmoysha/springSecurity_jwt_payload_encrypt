package com.livespread.util;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ResourceBundle;

import org.apache.log4j.Logger;
import org.springframework.web.multipart.MultipartFile;

public class UploadUtility {

	private static Logger LOGGER = Logger.getLogger(UploadUtility.class);

	private static ResourceBundle rb = ResourceBundle.getBundle("application");

	public static String createDirectoryPath(String directoryPath) 
	{
		try {
			if (!(new File(directoryPath).getCanonicalFile()).exists()) {
				(new File(directoryPath).getCanonicalFile()).mkdirs();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}

		return directoryPath;
	}

	public static boolean uploadFileonServer(String permanentPath,
			String fileName, String tempfilePath) throws IllegalStateException,
			IOException {

		File tempFile = new File(tempfilePath + fileName).getCanonicalFile();
		if (tempFile.renameTo(new File(permanentPath + fileName).getCanonicalFile()))
			return true;
		else
			return false;

	}

	public static boolean uploadFileinTempLocation(String filePath,
			MultipartFile multipartFile) throws IllegalStateException,
			IOException {
		File newfile = new File(filePath).getCanonicalFile();
		multipartFile.transferTo(newfile);
		return true;

	}

	public static boolean deleteFileinTempLocation(String filePath)
			throws IllegalStateException, IOException {
		File newFile = new File(filePath).getCanonicalFile();

		if (newFile.exists()) {
			newFile.delete();
			return true;
		} else
			return false;

	}

	public static String createFileName(String clientId, String fileName) {
		char delimiter = '_';
		String[] file = fileName.split("\\.");
		String fileN = file[0].replaceAll(" ", "_");
		return clientId + delimiter + fileN
				+ HelperUtility.getDateTime("[yyyy-MM-dd-hhmmssSSS]") + "."
				+ file[1];
	}

	public static String createFileName(String clientId, String fileName,
			int count) {
		char delimiter = '_';
		String[] file = fileName.split("\\.");
		return clientId + delimiter + count + "." + file[1];
	}

	public static String createFileName(String fileName) {
		String[] file = fileName.split("\\.");
		return file[0] + HelperUtility.getDateTime("[yyyy-MM-dd-hhmmssSSS]")
				+ "." + file[1];
	}

	public static String getOriginalFileName(String fileName) {
		String s[] = fileName.split("\\[");
		String name = s[0];
		String exts = s[1].split("\\]")[1];
		name = name + exts;
		return name;
	}

	public static String readFile(String filePath) throws IOException {
		File f = new File(filePath).getCanonicalFile();
		if (f.exists()) {
			BufferedReader reader = new BufferedReader(new FileReader(filePath));
			StringBuilder file = new StringBuilder(reader.readLine());
			String line = "";
			while (reader.ready()) {
				line = reader.readLine();
				file.append(line);
			}
			reader.close();
			return file.toString();
		} else {
			return "Document Not Found";
		}
	}

	public static String getPathForProcessedDoc(String filePath) {
		filePath = filePath.replace("SourceDocuments",
				"ProcessedDocuments/TextDocuments");
		int index = filePath.lastIndexOf("/");
		filePath = filePath.substring(0, index);
		index = filePath.lastIndexOf("/");
		String substring = filePath.substring(index + 1, filePath.length());

		if (index > 0)
			return (filePath.substring(0, index) + "/" + substring + "/");
		else
			return "none";
	}

	public static String getPathforOrgionalDoc(String filePath) {
		LOGGER.info("--- getPathforOrgionalDoc -----" + filePath);
		int index = filePath.lastIndexOf("/");
		filePath = filePath.substring(0, index);
		LOGGER.info("--- getPathforOrgionalDoc completed-----" + filePath);
		return filePath + "/";
	}

	public static String getPathforTextDoc(String filePath) {
		LOGGER.info("--- getPathforTextDoc -----" + filePath);
		int index = filePath.lastIndexOf(".");
		filePath = filePath.substring(0, index);
		filePath = filePath.replace(rb.getString("searchText"),
				rb.getString("replaceText"));
		LOGGER.info("--- getPathforTextDoc completed-----" + filePath);
		return filePath + rb.getString("anchorFileExt");
	}

	public static String getPathforAnchorDoc(String filePath, Integer fillingId) {
		LOGGER.info("--- getPathforAnchorDoc -----" + filePath + ":"
				+ fillingId);
		int index = filePath.lastIndexOf("/");
		filePath = filePath.substring(0, index);
		LOGGER.info("--- getPathforAnchorDoc -----"
				+ rb.getString("searchText") + rb.getString("replaceText"));
		filePath = filePath.replace(rb.getString("searchText"),
				rb.getString("replaceText"));
		LOGGER.info("--- getPathforAnchorDoc completed-----" + filePath + "/"
				+ rb.getString("anchorFileInitial") + fillingId
				+ rb.getString("anchorFileExt"));
		return filePath + "/" + rb.getString("anchorFileInitial") + fillingId
				+ rb.getString("anchorFileExt");
	}

	public static String getPathByFilingIdForProcessedDoc(String filePath,
			Integer fcik) {
		filePath = filePath.replace("SourceDocuments",
				"Processed_Documents/Text_Documents");
		int index = filePath.lastIndexOf("/");
		filePath = filePath.substring(0, index);
		index = filePath.lastIndexOf("/");
		String substring = filePath.substring(index + 1, filePath.length());

		String fcikStr = String.valueOf(fcik);
		fcikStr.length();
		String subPath = "/";
		for (int i = 0; i < fcikStr.length(); i++) {
			subPath = subPath + fcikStr.charAt(i) + "/";
		}

		if (index > 0)
			return (filePath.substring(0, index) + "/" + substring + subPath);
		else
			return "none";
	}

	public static String getPathByFilingIdForOrgionalDoc(String filePath) {
		LOGGER.info("--- getPathforOrgionalDoc -----" + filePath);
		int index = filePath.lastIndexOf("/");
		filePath = filePath.substring(0, index);
		LOGGER.info("--- getPathforOrgionalDoc completed-----" + filePath);
		return filePath + "/";
	}

}
