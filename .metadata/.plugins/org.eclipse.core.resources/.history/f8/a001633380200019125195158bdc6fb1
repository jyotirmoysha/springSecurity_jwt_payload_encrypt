package com.livespread.service;

import java.io.IOException;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import org.springframework.web.multipart.MultipartFile;

import com.livespread.command.CompanyInformationCommand;
import com.livespread.command.CurrencyCommand;
import com.livespread.command.FileUploadCommand;
import com.livespread.domain.AccountingStandard;
import com.livespread.domain.CompanyInformation;
import com.livespread.domain.Country;
import com.livespread.domain.DealerMetadata;
import com.livespread.domain.FileUploadModel;
import com.livespread.domain.IndustryTypeModel;
import com.livespread.domain.LanguageMaster;
import com.livespread.domain.LeadBank;
import com.livespread.domain.ParserMaster;
import com.livespread.domain.Sector;
import com.livespread.domain.SubPortfolioModel;
import com.livespread.domain.UltimateParent;
import com.livespread.domain.WorkQueue;

public interface BulkUploadService {

	String uploadTempDocument(MultipartFile File, String customerId)
			throws IllegalStateException, IOException;

	boolean uploadPermanantDocument(String file, String customerId,
			String parserName, String userName,
			Map<String, String> fileParserMap, String parserKey, String filepwd,Map<Integer,Integer> wqParserMap)
			throws IllegalStateException, IOException, Exception;

	boolean saveFileDetails(FileUploadModel fileUploadModel);

	List<ParserMaster> getParserListByUserGroupId(String userGroupId);

	List<Object> getBusinessList(String userGroupId);

	/**
	 * This function used for get all distinct business name from
	 * business_entity table
	 */
	Map<String, String> getDistinctBusinessList(String cName);
	
	/**
	 * This function used for get Sub_portfolio list and industry type list based on group id  
	 */
	List<SubPortfolioModel> f_getPortFolioListByGroupId(Integer userGroupId);

	
	/**
	 * This function used for get industry list based on portfolio id  
	 */
    List<IndustryTypeModel> f_getIndustryListByPortfolioId(Integer portfolioId);
    
	
	/**
	 * This methode used for fetch language list from Language_master
	 */
	List<LanguageMaster> f_getLanguageList();
	
	/**
	 * This method is used to get Country list 
	 */
	List<Country> getCountryList();
	
	/**
	 * This method is used to get Sector list 
	 */
	List<Sector> getSectorList();
	
	/**
	 * This method is used to get LeadBank list 
	 */
	List<LeadBank> getLeadBankList();
	
	/**
	 * This method is used to get UltimateParent list 
	 */
	List<UltimateParent> getUltimateParentList();
    
	/**
	 * This method is used to get AccountingStandard list of countries
	 */
	List<AccountingStandard> getAccountingStandardList();	
	
	
	boolean saveCompanyInformation(FileUploadCommand fileUploadCommand);
	
	List<CompanyInformation> getCompanyInformationList();	
	
	CompanyInformationCommand getCompanyInfoByCompanyId(String companyId);
	CompanyInformationCommand f_getCompanyInfoList(String id,String basedOn);
	
	Integer saveWorkque(WorkQueue workQueue);


	Country getCountryByName(String countryName)throws Exception;

	AccountingStandard getAccountingStandardByName(String accountingStandardName)throws Exception;

	UltimateParent getUltimateParentByName(String ultimateParentName)throws Exception;

	LeadBank getLeadBankByName(String leadBankName)throws Exception;

	List<CurrencyCommand> getCurrencyList() throws Exception;
	
	List<String> getDistinctCompanyIdList(String companyId);
	
	Collection<DealerMetadata> f_getDealsersList();
	
	public Map<String,String> getUserGrpAttrMappingList(Integer userGroupId,String screenName) throws Exception;
	public Map<String, String> f_getSicDescription(String sicDescr) throws Exception;;
	public Map<String, String> f_getNaicsDescription(String sicDescr) throws Exception;

	List<IndustryTypeModel> f_getIndustryTypeList();

}
