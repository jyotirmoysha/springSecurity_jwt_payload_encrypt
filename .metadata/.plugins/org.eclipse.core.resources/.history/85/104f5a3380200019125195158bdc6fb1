package com.livespread.util;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public class CipherUtils {

	static Log log = LogFactory.getLog(CipherUtils.class);

	private static byte[] key = { 0x74, 0x68, 0x69, 0x73, 0x49, 0x73, 0x41,
			0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79 };

	private static Cipher cipher = null;
	final static SecretKeySpec secretKey = new SecretKeySpec(key, "AES");

	private static Cipher getCipherObject() throws Exception {
		if (cipher == null) {
			cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
		}
		return cipher;
	}
	
	
	public static String encrypt(String strToEncrypt) {
		try {

			cipher = getCipherObject();
			if (cipher != null && strToEncrypt != null) {
				cipher.init(Cipher.ENCRYPT_MODE, secretKey);
				final String encryptedString = Base64.encodeBase64String(cipher
						.doFinal(strToEncrypt.getBytes("UTF-8")));
				return encryptedString.replace("==", "_EEEE_")
						.replaceAll("/", "_SSSS_").replaceAll("\\+", "_AAAA_");
			}
		} catch (Exception e) {
			log.error("Error while encrypting", e);
		}
		return null;		
	}

	public static String decrypt(String strToDecrypt) {
		try {
			
			cipher = getCipherObject();
			if (cipher != null && strToDecrypt != null) {
				cipher.init(Cipher.DECRYPT_MODE, secretKey);
				final String decryptedString = new String(cipher.doFinal(Base64
						.decodeBase64(strToDecrypt.replace("_EEEE_", "==")
								.replaceAll("_SSSS_", "/")
								.replaceAll("_AAAA_", "\\+"))),"UTF-8");
				return decryptedString;
			}
		} catch (Exception e) {
			log.error("Error while decrypting", e);
		}
		return null;
	}

}
