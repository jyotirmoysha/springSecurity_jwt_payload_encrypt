package com.livespread.vta;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

public class ZipUtils {

    private List <String> fileList;
   public String OUTPUT_ZIP_FILE;
     public String SOURCE_FOLDER;

    public ZipUtils() {
    	 
    }

    public ZipUtils(String OUTPUT_ZIP_FILE,String  SOURCE_FOLDER) {
    	fileList = new ArrayList <String> ();
        this.OUTPUT_ZIP_FILE = OUTPUT_ZIP_FILE;
        this.SOURCE_FOLDER = SOURCE_FOLDER;
    }
    public void createZipFolder(){
    	  try {
			ZipUtils appZip = new ZipUtils();
			  appZip.generateFileList(new File(SOURCE_FOLDER).getCanonicalFile());
			  appZip.zipIt(OUTPUT_ZIP_FILE);
		} catch (IOException e) {
			e.printStackTrace();
		}
    }

    public void zipIt(String zipFile) {
        byte[] buffer = new byte[1024];
        String source = null;
        FileOutputStream fos = null;
        ZipOutputStream zos = null;
        try {
        	source = new File(SOURCE_FOLDER).getCanonicalFile().getName();
            fos = new FileOutputStream(zipFile);
            zos = new ZipOutputStream(fos);

            System.out.println("Output to Zip : " + zipFile);
            FileInputStream in = null;

            for (String file: this.fileList) {
                System.out.println("File Added : " + file);
                ZipEntry ze = new ZipEntry(source + File.separator + file);
                zos.putNextEntry(ze);
                try {
                    in = new FileInputStream(SOURCE_FOLDER + File.separator + file);
                    int len;
                    while ((len = in .read(buffer)) > 0) {
                        zos.write(buffer, 0, len);
                    }
                } finally {
                    in.close();
                }
            }

            zos.closeEntry();
            System.out.println("Folder successfully compressed");

        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            try {
                zos.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public void generateFileList(File node) {
        try {
			if (node.isFile()) {
			    fileList.add(generateZipEntry(node.toString()));
			}

			if (node.isDirectory()) {
			    String[] subNote = node.list();
			    for (String filename: subNote) {
			        generateFileList(new File(node, filename).getCanonicalFile());
			    }
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
    }

    private String generateZipEntry(String file) {
        return file.substring(SOURCE_FOLDER.length() + 1, file.length());
    }
}