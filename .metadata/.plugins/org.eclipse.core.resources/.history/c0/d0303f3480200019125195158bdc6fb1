package com.livespread.controller;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.json.simple.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.livespread.command.ArsPoCommand;
import com.livespread.command.FinancialItemsCommand;
import com.livespread.command.NormalizeFormData;
import com.livespread.common.Constant;
import com.livespread.domain.FinancialItems;
import com.livespread.domain.ParserOutput;
import com.livespread.domain.User;
import com.livespread.service.FinancialItemService;
import com.livespread.service.NormalizationService;
import com.livespread.service.WorkQueueService;
import com.livespread.util.NormTemplateExtractionUtil;

@Controller
public class FinancialItemController {
	
	private Logger LOGGER = Logger.getLogger(FinancialItemController.class);
	@Autowired
	private NormalizationService normalizationService;

	@Autowired
	private FinancialItemService financialItemService;
	@Autowired
	private WorkQueueService workQueueService;
	
	

	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/getFinancialLabelAutoComplete.htm", method = {RequestMethod.GET, RequestMethod.POST })
		public @ResponseBody JSONObject getHeaderLabelAutoComplete(@RequestParam("fiLabel") String fiLabel,@RequestParam("levelName") String levelName,@RequestParam("filingId") Integer filingId,HttpServletRequest request) {
		LOGGER.info("** Start-showDataMappingPagination method");
		List<String> dataHeaderList =null;
		JSONObject jsonResponse = new JSONObject();
		HttpSession httpSession=request.getSession();
		try{
		if(fiLabel!=null && !fiLabel.trim().equalsIgnoreCase("")){
			if(levelName.equalsIgnoreCase("CompanyLevel")){
				int entityId = 0;
				if(httpSession.getAttribute("entityId")!=null){
				entityId = Integer.parseInt(httpSession.getAttribute("entityId").toString());
				}
				dataHeaderList = financialItemService.f_getfiLabelList(fiLabel,entityId,levelName);
				}
			else if(levelName.equalsIgnoreCase("IndustryLevel"))
				{
				
				String industryIdString=workQueueService.getIndustryTypeIdByFilingId(filingId);
					if(industryIdString!=null)
					{
						dataHeaderList = financialItemService.f_getfiLabelList(fiLabel,Integer.parseInt(industryIdString),levelName);
					}
				}
			else{
				int templateId=0;
				if(httpSession.getAttribute("templateId")!=null){
				templateId = Integer.parseInt(httpSession.getAttribute("templateId").toString());
				}
				dataHeaderList = financialItemService.f_getfiLabelList(fiLabel,templateId,levelName);
				}
		
			jsonResponse.put("dataHeaderList", dataHeaderList);
			return jsonResponse;	
		}
		jsonResponse.put("dataHeaderList", new ArrayList<String>());
		return jsonResponse;
		
		}
		catch(Exception e){
			e.printStackTrace();
			LOGGER.error("Error in showDataMappingPagination", e);
			jsonResponse.put("dataHeaderList", new ArrayList<String>());
			return jsonResponse;
		}
		
	  }
	

@RequestMapping(value = "/deleteFinancialItem.htm", method = {RequestMethod.GET, RequestMethod.POST })
public @ResponseBody String deleteFinancialItem(@RequestParam("fiId") String fiId,HttpSession session)
{
String msg="";
  try{

 int fiIdNum=Integer.parseInt(fiId);
User user = (User) session.getAttribute("user");
boolean flag=financialItemService.f_deleteFinancialItemByFiId(fiIdNum,user.getUserId().intValue());
if(flag){
	msg="Financial Item deleted successfully.";
}else{
	msg="Failed.";
}
  }catch (Exception e) {
  LOGGER.error("Exception Occured", e);
  e.printStackTrace();
 }
  return msg;
}

@RequestMapping(value = "/showReviewCompanyGlobalLevelPopup.htm", method = { RequestMethod.GET, RequestMethod.POST })
public String showDataMappingList(@RequestParam("levelName") String levelName,@RequestParam("filingId") Integer filingId,Model map, HttpSession session) {
	LOGGER.info("** Start-showDataMappingList method!");
	//List<String> roles =null;
	Integer totalPages = 0;
	Integer page=0;
	try{
		String filabel="";
		Integer displayRecords =10;
		Integer totalRecords=0;
		 List<FinancialItems> financialItemsList=null;
 	    Integer firstRecord=0;
 	   int templateId=normalizationService.getTemplateIdByFilingIdFromFiling(filingId);
		if(displayRecords!=null && templateId!=0){
		if(levelName.equalsIgnoreCase("CompanyLevel"))
		{
		int entityId=workQueueService.f_getEntityIdByFilingId(filingId);
		totalRecords = financialItemService.totalFinancialsItemCountByEntityId(entityId,filabel,templateId);
		financialItemsList = financialItemService.f_findFinancialListByEntityId(entityId, firstRecord,displayRecords,filabel,templateId);
		session.setAttribute("entityId",entityId);
		session.setAttribute("templateId",templateId);
		}
		else if(levelName.equalsIgnoreCase("IndustryLevel"))
		{
		String industryId=workQueueService.getIndustryTypeIdByFilingId(filingId);
		totalRecords = financialItemService.totalFinancialsItemCountByIndustryId(industryId,filabel,templateId);
		financialItemsList = financialItemService.f_findFinancialListByIndustryId(industryId, firstRecord,displayRecords,filabel,templateId);
		session.setAttribute("industryId",industryId);
		session.setAttribute("templateId",templateId);
		}
		else{
		totalRecords = financialItemService.totalFinancialsItemCountByTemplateId(templateId,filabel);	
		financialItemsList = financialItemService.f_findFinancialListByTemplateId(templateId, firstRecord,displayRecords,filabel);
		session.setAttribute("templateId",templateId);
		}
		session.setAttribute("totalRecords",totalRecords);
	    if (totalRecords >0) {
	    	page=1;
	    	totalPages = totalRecords / displayRecords;
	    	if ((totalRecords % displayRecords)> 0) {
				totalPages++;
			}
	
	   }
		}
		map.addAttribute("totalPages", totalPages);
		map.addAttribute("page", page);
		map.addAttribute("displayRecords", displayRecords);
		map.addAttribute("levelName", levelName);
		map.addAttribute("financialItemsList", financialItemsList);

	}
	catch(Exception e){
		e.printStackTrace();
		LOGGER.error("showDataMappingListp", e);
		
	}
	return "reviewCompanyGlobalPopup";
}

@SuppressWarnings("unchecked")
@RequestMapping(value = "/searchFinancialItemList.htm", method = { RequestMethod.GET, RequestMethod.POST })
public @ResponseBody JSONObject searchFinancialItemList(@RequestParam("levelName") String levelName,@RequestParam("filingId") Integer filingId,@RequestParam("page") Integer page,@RequestParam("displayRecords") Integer displayRecords,@RequestParam("fiLabel") String fiLabel,HttpServletRequest request,Model map)
{	 

	LOGGER.info("** Start-showDataMappingPagination method");
	HttpSession httpSession=request.getSession();
	JSONObject jsonResponse = new JSONObject();
	 List<FinancialItems> financialItemsList=null;
	try{
	  Integer firstRecord=(page-1)*displayRecords;
	    
		Integer totalPages = 0;
		Integer totalRecords=0;	

			if (levelName.equalsIgnoreCase("CompanyLevel")){
				if(httpSession.getAttribute("entityId")!=null){
				int entityId = Integer.parseInt(httpSession.getAttribute("entityId").toString());
				int templateId = Integer.parseInt(httpSession.getAttribute("templateId").toString());
				financialItemsList = financialItemService.f_findFinancialListByEntityId(entityId, firstRecord,displayRecords,fiLabel,templateId);
				if (fiLabel != null && !fiLabel.isEmpty() && !fiLabel.equalsIgnoreCase("")) {
					totalRecords = financialItemService.totalFinancialsItemCountByEntityId(entityId,fiLabel,templateId);
					if (totalRecords > 0) {
						totalPages = totalRecords / displayRecords;
						if ((totalRecords % displayRecords) > 0) {
							totalPages++;
						}
					}
				}else{
				totalRecords = Integer.parseInt(httpSession.getAttribute("totalRecords").toString());
				if (totalRecords > 0) {
						totalPages = totalRecords / displayRecords;
						if ((totalRecords % displayRecords) > 0) {
							totalPages++;
						}
					}
				}
			}
			}
			else if (levelName.equalsIgnoreCase("IndustryLevel")){
				int templateId = Integer.parseInt(httpSession.getAttribute("templateId").toString());
				String industryId = workQueueService.getIndustryTypeIdByFilingId(filingId);
				financialItemsList = financialItemService.f_findFinancialListByIndustryId(industryId,firstRecord,displayRecords,fiLabel,templateId);
				if (fiLabel != null && !fiLabel.isEmpty() && !fiLabel.equalsIgnoreCase("")) {
					totalRecords = financialItemService.totalFinancialsItemCountByIndustryId(industryId,fiLabel,templateId);
					if (totalRecords > 0) {
						totalPages = totalRecords / displayRecords;
						if ((totalRecords % displayRecords) > 0) {
							totalPages++;
						}
					}
				}else{
				totalRecords = Integer.parseInt(httpSession.getAttribute("totalRecords").toString());
				if (totalRecords > 0) {
						totalPages = totalRecords / displayRecords;
						if ((totalRecords % displayRecords) > 0) {
							totalPages++;
						}
					}
				}
			}
			else{

				if(httpSession.getAttribute("templateId")!=null){
				int templateId = Integer.parseInt(httpSession.getAttribute("templateId").toString());
				financialItemsList = financialItemService.f_findFinancialListByTemplateId(templateId, firstRecord,displayRecords,fiLabel);
				if (fiLabel != null && !fiLabel.isEmpty() && !fiLabel.equalsIgnoreCase("")) {
					totalRecords = financialItemService.totalFinancialsItemCountByTemplateId(templateId,fiLabel);
					if (totalRecords > 0) {
						totalPages = totalRecords / displayRecords;
						if ((totalRecords % displayRecords) > 0) {
							totalPages++;
						}
					}
				}else{
				totalRecords = Integer.parseInt(httpSession.getAttribute("totalRecords").toString());
				if (totalRecords > 0) {
						totalPages = totalRecords / displayRecords;
						if ((totalRecords % displayRecords) > 0) {
							totalPages++;
						}
					}
				}
			}
			}
			
	  jsonResponse.put("totalPages", totalPages);
	  jsonResponse.put("page", page);
	  jsonResponse.put("displayRecords", displayRecords);
	  jsonResponse.put("financialItemsList", financialItemsList);
	  jsonResponse.put("levelName", levelName);

	}catch(Exception e){
		e.printStackTrace();
		LOGGER.error("Error in showDataMappingPagination", e);
	}
	return jsonResponse;	
  }	


@SuppressWarnings("unchecked")
@RequestMapping(value = "/showCompanyLevelPopUp.htm", method = {
		   RequestMethod.GET, RequestMethod.POST })
		public String showCompanyLevelPopUp(@RequestParam("levelName") String levelName,@RequestParam("filingId") Integer filingId,Model map,HttpSession session){
		  
		  try{
		  LOGGER.info("** start-showCompanyLevelPopUp methode");
		  
		  /**
		   * Here we get sectionList based on filing id from session
		   */
		  Map<String,String> sectionMappingList=(Map<String,String>) session.getAttribute("sessionSectionList");
		  List<String> sectionList=null;
		  Map<String,String> sectionShortNameFullNameMap=null;
		  if(sectionMappingList!=null && !sectionMappingList.isEmpty())
		  {
			   sectionShortNameFullNameMap=new LinkedHashMap<String,String>();
			  sectionList=new ArrayList<String>();
		  for (Map.Entry<String, String> entry : sectionMappingList.entrySet())
		  {
			   sectionShortNameFullNameMap.put(entry.getKey(), entry.getValue());
			   sectionList.add(entry.getKey());
		  }
		  }//end if
		  /**
		   * Here we fetch records from parseroutput where norm lable should not be blank and section include from  sectionlist and flag!='D'
		   */
		  List<ParserOutput> parerOutputListDup=normalizationService.f_fetchParserOutputByNormLabel(filingId,levelName,sectionList);
		  List<ParserOutput> parerOutputList=new ArrayList<>();
		  //here add class name based on searchtype
		  String mappingName ="";
		  String[] mappingNameArray =null;
		  String mappingNameConcatination="";
		  String mappingNameClass="";
		  if(!CollectionUtils.isEmpty(parerOutputListDup))
		  {
		  for(ParserOutput parserOutput:parerOutputListDup)
		  {
			  mappingNameArray =null;
			  mappingNameConcatination="";
			  mappingName = parserOutput.getMappingName();
			  mappingNameClass="metadata_";
			  if(mappingName!=null && !mappingName.trim().isEmpty())
			  {
				  mappingNameArray = mappingName.split(",");
				  List<String> mappingNameList =  Arrays.asList(mappingNameArray);
				  if(!CollectionUtils.isEmpty(mappingNameList))
				  {
					  Collections.sort(mappingNameList);
					  for (String selectedMappingName : mappingNameList) 
					  {
						  mappingNameConcatination=mappingNameConcatination+selectedMappingName+" ,";
						  mappingNameClass=mappingNameClass+selectedMappingName.charAt(0);
					  }
					  mappingNameConcatination=mappingNameConcatination.substring(0, mappingNameConcatination.length()-2);
				  }
				  parserOutput.setMappingName(mappingNameConcatination);
				  parserOutput.setSearchLevelClassName(mappingNameClass);
			  }
		   parerOutputList.add(parserOutput);
		  }
		  }
		  List<ArsPoCommand> arsPoCommandList = normalizationService.f_fetchArsPoMAppingBYFilingIdandSectionList(filingId,sectionList);
		  if(!CollectionUtils.isEmpty(arsPoCommandList))
		  {
			  for (ArsPoCommand arsPoCommand : arsPoCommandList) 
			  {
				  mappingNameArray =null;
				  mappingNameConcatination="";
				  mappingName = arsPoCommand.getMappingName();
				  mappingNameClass="metadata_";
				  if(mappingName!=null && !mappingName.trim().isEmpty())
				  {
					  mappingNameArray = mappingName.split(",");
					  List<String> mappingNameList =  Arrays.asList(mappingNameArray);
					  if(!CollectionUtils.isEmpty(mappingNameList))
					  {
						  Collections.sort(mappingNameList);
						  for (String selectedMappingName : mappingNameList) 
						  {
							  mappingNameConcatination=mappingNameConcatination+selectedMappingName+" ,";
							  mappingNameClass=mappingNameClass+selectedMappingName.charAt(0);
						  }
						  mappingNameConcatination=mappingNameConcatination.substring(0, mappingNameConcatination.length()-2);
					  }
					  arsPoCommand.setMappingName(mappingNameConcatination);
					  arsPoCommand.setSearchLevelClassName(mappingNameClass);
				  }
			  }
		  }

		  map.addAttribute("parerOutputList", parerOutputList);
		  map.addAttribute("arsPoCommandList", arsPoCommandList);
		  map.addAttribute("sectionShortNameFullNameMap", sectionShortNameFullNameMap);
		  map.addAttribute("levelName", levelName);
		  
		/*
		 * Here we fetch template id based on filing id from filing table
		 */
		  Integer templateId=normalizationService.getTemplateIdByFilingIdFromFiling(filingId);
		  map.addAttribute("templateId", templateId);
		  map.addAttribute("filingId", filingId);
		  }catch (Exception e) {
		   e.printStackTrace();
		   LOGGER.error("Error", e);
		  }
		  LOGGER.info("** End-showCompanyLevelPopUp methode");
		  
		  return "showNormTemplatePopup";
		  
		 }

@RequestMapping(value = "/insertGlobelLevelData.htm", method = {RequestMethod.GET, RequestMethod.POST })
public @ResponseBody String insertGlobelLevelData(NormalizeFormData data) {
	LOGGER.info("------------------ insertGlobelLevelData  starts --------------------");
	String result = "";
	
	data.setFillingId(data.getFillingId());
	try {
		String updateMessage="";
		String insertMessage="";
		String nonUpdateMessage="";
		int totalCount=0;
		String count = normalizationService.insertGlobelLevelData(data);
		String updatedPoids="";
		String resluts []= count.split("#");
		int updateCount=0;
		int insertCount=0;
		int exactCount=0;
		if(resluts.length==4){
		updateCount=Integer.parseInt(resluts[0]);
		insertCount=Integer.parseInt(resluts[1]);
		exactCount=Integer.parseInt(resluts[2]);
		updatedPoids=resluts[3];
		if(updateCount>0){
			updateMessage=updateCount + " record'(s) updated."+Constant.CR+Constant.LF;
		}
		if(insertCount>0){
			insertMessage=insertCount + " record'(s) inserted."+Constant.CR+Constant.LF;
		}
		if(exactCount>0){
			nonUpdateMessage="Mapping for "+ exactCount + " record'(s) are already exists."+Constant.CR+Constant.LF;
		}
		totalCount= updateCount+insertCount;
		}
		if (totalCount >= 1000) {
			result += "Selected data may not have proper mapping."+Constant.CR+Constant.LF;
		} else if (totalCount > 0) {
			result=insertMessage+updateMessage+nonUpdateMessage+"#"+updatedPoids;
		} else {
			result += " Mapping is already exists for the selected record'(s).";
		}
		/**
		 * Here we insert data in language_mapping_metadata table based on 
		 */
		normalizationService.f_saveInLanguageMappingMetadata(data.getDelPoId());
		LOGGER.info(result);

	} catch (Exception e) {
		LOGGER.error("Error", e);
		e.printStackTrace();

	}
	return result;

}

	@RequestMapping(value = "/importFinancialITemsExcel.htm", method = RequestMethod.POST)
	@PreAuthorize("hasRole('ROLE_ADMIN')")
	public @ResponseBody String importFinancialITemsExcel(MultipartHttpServletRequest request, HttpServletResponse response,HttpSession session) {                 

		Iterator<String> itr =  request.getFileNames();
	     List<FinancialItemsCommand> financialItemsCommandList=null;
	     String status="";
	     String companyLeverUpdateStatus="";
	     String globalLeverUpdateStatus="";
	     String globalLeverinsertStatus="";
	     MultipartFile mpf=null;
	     User userObject = (User) session.getAttribute("user");
		 if(itr.hasNext()){
	    	 mpf = request.getFile(itr.next());
	     }
	     try {
		     if(mpf!=null){
		    	 financialItemsCommandList=NormTemplateExtractionUtil.extractFinancialITems(mpf);
		    	 status=normalizationService.bulkUpdateFinancialItems(financialItemsCommandList, userObject);
		     }
		     
		     String[] statusArray=status.split("~");
		     if(statusArray!=null && statusArray.length==3){
		    	 if(new Integer(statusArray[0]).intValue()>0){
		    		 companyLeverUpdateStatus = new Integer(statusArray[0]).intValue() + " record'(s) approved successfully in company level."+Constant.CR+Constant.LF;
		    	 }
		    	 if(new Integer(statusArray[1]).intValue()>0){
		    		 globalLeverUpdateStatus =new Integer(statusArray[1]).intValue() + " record'(s) approved successfully in global level."+Constant.CR+Constant.LF;
		    	 }
		    	 if(new Integer(statusArray[2]).intValue()>0){
		    		 globalLeverinsertStatus =new Integer(statusArray[2]).intValue() + " record'(s)  added and approved successfully in global level."+Constant.CR+Constant.LF;
		    	 }
		    	 status="";
		    	 status=companyLeverUpdateStatus+globalLeverUpdateStatus+globalLeverinsertStatus;
		     }
		     
	     } catch (Exception e) {
				e.printStackTrace();
			}
	     if("".equalsIgnoreCase(status)){
	    	 return "No record'(s) were updated.";
	     }
	     return status;
	 
	 }
}
