package com.livespread.controller;

import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.codehaus.jackson.map.ObjectMapper;
import org.json.simple.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.authentication.encoding.MessageDigestPasswordEncoder;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;

import com.livespread.domain.User;
import com.livespread.service.ChangePasswordService;

import com.livespread.service.EmailServiceImpl;
import com.livespread.service.UserGroupService;
import com.livespread.service.ValidationService;
import com.livespread.util.CipherUtils;
import com.livespread.util.HTMLTagValidator;

@Controller
public class AddUserController {

	private Logger LOGGER = Logger.getLogger(AddUserController.class);

	@Autowired
	private ValidationService validationServ;

	@Autowired
	private UserGroupService userGroupService;

	@Autowired
	private MessageDigestPasswordEncoder messageDigestPasswordEncoder;

	@Autowired
	private ChangePasswordService changePasswordService;

	/*
	 * This methode used for save or edit user
	 */

	@RequestMapping(value = "/addNewUser.htm", method = { RequestMethod.GET,
			RequestMethod.POST })
	@PreAuthorize("hasRole('ROLE_ADMIN')")
	public @ResponseBody
	String addNewUser(@ModelAttribute User user,HttpServletRequest request) {

		LOGGER.info("** Start--show addNewUser methode");
		String result1 = "";
		//List all input field to check html tag is exist or not
		List<String> allFormInputs=new ArrayList<>();
		ArrayList<String> errorList = new ArrayList<String>();
		ObjectMapper objectMapper = new ObjectMapper();
		Map<String, Object> resultMap = new HashMap<String, Object>();
		User userObject = null;
		boolean addUserFlag = false;
		long currentTimeStamp=new Date().getTime();

		
		try {
			
			
			long sessionTimeStamp =0;
			if(request.getSession().getAttribute("CurrentTimeStamp")!=null)
			{
				Long sessionTimeStampObject = (Long) request.getSession().getAttribute("CurrentTimeStamp");	
				sessionTimeStamp =sessionTimeStampObject.longValue();
			}
			
			long userTimeStamp= user.getCurrentTimeStamp().longValue();
			if (sessionTimeStamp != userTimeStamp) 
			{
				SecurityContextHolder.getContext().setAuthentication(null);
				addUserFlag = false;
				resultMap.put("addUserFlag", addUserFlag);
				resultMap.put("logout", true);
				result1 = objectMapper.writeValueAsString(resultMap);
				return result1;
			}
			request.getSession().setAttribute("CurrentTimeStamp",currentTimeStamp);
			resultMap.put("currentTimeStamp",currentTimeStamp);	
			
			
			/*
			 * Here we make all user fields in lower case
			 */
			String firstName=user.getFirstName().toLowerCase();
			String LastName=user.getLastName().toLowerCase();
			String login=user.getLogin().toLowerCase();
			String email=user.getEmail().toLowerCase();

			user.setFirstName(firstName);
			user.setLastName(LastName);
			user.setLogin(login);
			user.setEmail(email);
			
			allFormInputs.add(firstName);
			allFormInputs.add(LastName);
			allFormInputs.add(login);
			allFormInputs.add(email);
			allFormInputs.add(user.getUsersGroupName());
			HTMLTagValidator htmlTagValidator=new HTMLTagValidator();
			boolean isHtmlTagExist=htmlTagValidator.validate(allFormInputs);
			errorList = validationServ.validateUserDetails(user);
			if(isHtmlTagExist){
			errorList.add("HTML character(<(\"[^\"]*\"|'[^']*'|[^'\">])*>) data is not allowed here");
			}
			if (!errorList.isEmpty()) {
				resultMap.put("errorList", errorList);
				result1 = objectMapper.writeValueAsString(resultMap);
			} else {
				/* insert in to users table */
				if (SecurityContextHolder.getContext().getAuthentication()
						.getPrincipal() instanceof User)
					userObject = (User) SecurityContextHolder.getContext()
							.getAuthentication().getPrincipal();

				user.setCreatedBy(userObject.getUserId().toString());

				boolean flag = userGroupService.saveUser(user);

				if (flag) {
					addUserFlag = true;
					saveandsendemail(user, messageDigestPasswordEncoder, null,
							"createuser", userObject);
				} else
					addUserFlag = false;
				resultMap.put("addUserFlag", addUserFlag);
				result1 = objectMapper.writeValueAsString(resultMap);

			}

		} catch (Exception e) {
			e.printStackTrace();
			LOGGER.error("Error", e);
		}
		LOGGER.info("** end--end addNewUser methode");
		
		return result1;

	}

	private void saveandsendemail(User user,
			MessageDigestPasswordEncoder messageDigestPasswordEncoder,
			JSONObject jsonObject, String userType, User loggedUsers) {
		LOGGER.info("**start --saveandsendemail");

		ResourceBundle emailProperties = ResourceBundle.getBundle("email");
		String emailAddress = user.getEmail();
		String username = user.getLogin();
		String firstName = user.getFirstName();
		String lastName = user.getLastName();
		String url = null;
		String userinfo = null;
		String messageSubject = null;
		String messageText = null;

		try {
			if (username != null) {
				String encActivationId = userGroupService
						.saveActivationDetails(emailAddress,
								messageDigestPasswordEncoder);
				if (firstName != null) {
					firstName = StringUtils.capitalize(firstName);
					userinfo = firstName;
				}
				if (lastName != null) {
					lastName = StringUtils.capitalize(lastName);
					userinfo += " " + lastName;
				}
				if (userinfo == null) {
					userinfo = "User";
				}
				if (encActivationId != null
						&& !"".equals(encActivationId.trim())) {
					String clientSignUpLink = emailProperties
							.getString("clientSignUpLink");
					if ("createuser".equals(userType)) {
						url = clientSignUpLink
								+ "?keynode1="
								+ messageDigestPasswordEncoder.encodePassword(
										emailAddress, null) + "&keynode2="
								+ encActivationId + "&keynode3=cre";
						messageSubject = emailProperties
								.getString("mail.subject");
						messageText = MessageFormat.format(
								emailProperties.getString("mail.bodycontent"),
								userinfo, username, url);
					} else if ("resetPwd".equals(userType)) {
						url = clientSignUpLink
								+ "?keynode1="
								+ messageDigestPasswordEncoder.encodePassword(
										emailAddress, null) + "&keynode2="
								+ encActivationId + "&keynode3=res";
						messageSubject = emailProperties
								.getString("mail.subjectAdmReset");
						messageText = MessageFormat.format(emailProperties
								.getString("mail.Admbodycontent"), userinfo,
								username, url);
					} else if ("forgotPwd".equals(userType)) {
						url = clientSignUpLink
								+ "?keynode1="
								+ messageDigestPasswordEncoder.encodePassword(
										emailAddress, null) + "&keynode2="
								+ encActivationId + "&keynode3=fpwd";
						messageSubject = MessageFormat.format(emailProperties
								.getString("mail.forgetPasswordSubject"),
								user.getFirstName() + ", here's");
						messageText = MessageFormat.format(emailProperties
								.getString("mail.bodycontentForgetPassword"),
								username, url);
					}
					/*
					 * 1:Here When user created then mail go to new user with
					 * change password link
					 */

					EmailServiceImpl emailServiceImpl=new EmailServiceImpl(emailAddress, emailProperties, messageSubject, messageText, null);
					emailServiceImpl.start();
					/*
					 * 2:Here mail go to LSPROD Alias in CC and created by in
					 * TO.
					 */
					if (("createuser".equals(userType))
							|| ("resetPwd".equals(userType))) {
						
						String loggedUserLastName="";
						if(loggedUsers.getLastName()!=null){
							loggedUserLastName=loggedUsers.getLastName();
						}
						
						String adduserMessageBody = MessageFormat
								.format(emailProperties
										.getString("mail.addUserNotificationbody"),
										loggedUsers.getFirstName() + " "
												+ loggedUserLastName,
										user.getFirstName() + " "
												+ user.getLastName(), user
												.getUsersGroupName(), user
												.getUsername(), user.getEmail());

						messageSubject=emailProperties.getString("mail.addUserNotificationSubject");
						String sendCC=emailProperties.getString("mail.smtp.cc");
						emailServiceImpl=new EmailServiceImpl(loggedUsers.getEmail(), emailProperties, messageSubject, adduserMessageBody, sendCC);
						emailServiceImpl.start();
					}
				} else {
					throw new Exception("Fail to save acn information of user.");
				}
			}

		} catch (Exception ex) {
			LOGGER.error("Exception ::", ex);
			ex.printStackTrace();
		}
		LOGGER.info("END :::UserManagementController:::saveandsendemail");

	}

	/*
	 * This function used for show edit user based on user id
	 */
	@RequestMapping(value = "/showEditUser.htm", method = RequestMethod.POST)
	@PreAuthorize("hasRole('ROLE_ADMIN')")
	public @ResponseBody
	String editUser(@RequestParam("userId") String ecnryptuserId) {
		LOGGER.info("** start --edituser by user id");

		User user = null;
		String result1 = "";
		ObjectMapper objectMapper = new ObjectMapper();
		Map<String, Object> resultMap = new HashMap<String, Object>();
		try {
			String userId = CipherUtils.decrypt(ecnryptuserId);
			user = changePasswordService
					.getUserByUserId(Long.parseLong(userId));
			 
			resultMap.put("email", user.getEmail());
			 resultMap.put("userId", user.getUserId());
			resultMap.put("firstName", user.getFirstName());
			resultMap.put("lastName", user.getLastName());
			resultMap.put("login", user.getLogin());
			resultMap.put("userGroupId",
					user.getUserGroupId() + "~" + user.getUsersGroupName());
			resultMap.put("userAccess", user.getUserAccess());
			resultMap.put("flag", user.getFlag());

			result1 = objectMapper.writeValueAsString(resultMap);

		} catch (Exception e) {
			e.printStackTrace();
			LOGGER.error("Error:", e);

		}
		LOGGER.info("** start --edituser by user id");
		return result1;
	}

	@RequestMapping(value = "/saveEditUser.htm", method = { RequestMethod.GET,
			RequestMethod.POST })
	@PreAuthorize("hasRole('ROLE_ADMIN')")
	public @ResponseBody
	String saveEditUser(@ModelAttribute User user, HttpServletRequest request) {
		LOGGER.info("**-start--saveEdituser methode start");
		ResourceBundle emailProperties = ResourceBundle.getBundle("email");
		String result1 = "";
		String mailStatus = "";
		try {
			/*
			 * Here we make all user fields in lower case
			 */
			user.setUserAccess(user.getUserAccess());
			
			boolean flag = false;
			ObjectMapper objectMapper = new ObjectMapper();
			Map<String, Object> resultMap = new HashMap<String, Object>();
			ArrayList<String> errorList = new ArrayList<String>();
			String firstName=user.getFirstName().toLowerCase();
			String LastName=user.getLastName().toLowerCase();
			String login=user.getLogin().toLowerCase();
			String email=user.getEmail().toLowerCase();

			user.setFirstName(firstName);
			user.setLastName(LastName);
			user.setLogin(login);
			user.setEmail(email);
			user.setUserAccess(user.getUserAccess());
			
			List<String> allFormInputs=new ArrayList<>();
			allFormInputs.add(firstName);
			allFormInputs.add(LastName);
			allFormInputs.add(login);
			allFormInputs.add(email);
			allFormInputs.add(user.getUsersGroupName());
			HTMLTagValidator htmlTagValidator=new HTMLTagValidator();
			boolean isHtmlTagExist=htmlTagValidator.validate(allFormInputs);
			errorList = validationServ.validateUserDetails(user);
			if(isHtmlTagExist){
			errorList.add("HTML character(<(\"[^\"]*\"|'[^']*'|[^'\">])*>) data is not allowed here");
			}
	
			if (!errorList.isEmpty()) {
				resultMap.put("errorList", errorList);
				result1 = objectMapper.writeValueAsString(resultMap);
			} else {
				User loginUserDeatials = (User) request.getSession()
						.getAttribute("user");
				user.setModifiedBy(loginUserDeatials.getUserId().toString());
				
				changePasswordService.editUser(user);
				flag = true;
				if (flag) {
					/* If user modified successfully then send email */
					String adduserMessageBody = MessageFormat
							.format(emailProperties
									.getString("mail.updateUserNotificationbody"),
									loginUserDeatials.getUsername(), user
											.getUsername(), user.getEmail());					
					String messageSubject=emailProperties.getString("mail.updateUserNotificationSubject");
					String sendCC=emailProperties.getString("mail.smtp.cc");
					EmailServiceImpl emailServiceImpl=new EmailServiceImpl(user.getEmail(), emailProperties, messageSubject, adduserMessageBody, sendCC);
					emailServiceImpl.start();
				}

				if (mailStatus != null && "error".equalsIgnoreCase(mailStatus)) {
					LOGGER.error("Fail to send email.");
					resultMap.put("mailStatus", "Fail to send email.");
				} else if (mailStatus != null
						&& "success".equalsIgnoreCase(mailStatus)) {
					LOGGER.info("successfully  email send.");
					resultMap.put("mailStatus", "successfully email send.");
				}

				resultMap.put("flag", flag);
				result1 = objectMapper.writeValueAsString(resultMap);
			}
		} catch (Exception e) {
			e.printStackTrace();
			LOGGER.error("Error:", e);
		}
		LOGGER.info("**-end--saveEdituser methode start");
		return result1;
	}

	@RequestMapping(value = "/deleteUser.htm", method = { RequestMethod.GET,
			RequestMethod.POST })
	@PreAuthorize("hasRole('ROLE_ADMIN')")
	public @ResponseBody
	boolean deleteUser(@RequestParam("userId") String ecnryptuserId,
			HttpServletRequest request) {
		boolean flag = false;
		LOGGER.info("**-start--delete user methode");
		ResourceBundle emailProperties = ResourceBundle.getBundle("email");
		try {
			String userId = CipherUtils.decrypt(ecnryptuserId);
			User loginUserDeatials = (User) request.getSession().getAttribute("user");
			User removedUserDetails = changePasswordService
					.getUserByUserId(Long.parseLong(userId));
			int status = changePasswordService.deleteUser(Long
					.parseLong(userId), loginUserDeatials.getUserId()
					.toString());
			if (status == 1) {
				String removeUserMessageBody = MessageFormat.format(
						emailProperties
								.getString("mail.removeUserNotificationbody"),
						loginUserDeatials.getUsername(), removedUserDetails
								.getUsername(), removedUserDetails
								.getUsersGroupName(), removedUserDetails
								.getEmail());
			String messageSubject=emailProperties.getString("mail.removeUserNotificationSubject");
			String sendCC=emailProperties.getString("mail.smtp.cc");
			EmailServiceImpl emailServiceImpl=new EmailServiceImpl(removedUserDetails.getEmail(), emailProperties, messageSubject, removeUserMessageBody, sendCC);
			emailServiceImpl.start();
				flag = true;
			}
		} catch (Exception e) {
			e.printStackTrace();
			LOGGER.error("Error:", e);
		}
		LOGGER.info("**-end--delete user methode");
		return flag;
	}

	@RequestMapping(value = "/forgotPwd.htm", method = { RequestMethod.GET,
			RequestMethod.POST })
	public String forgotPwdPage(HttpServletRequest request,
			HttpServletResponse response, Model map) {
		LOGGER.info("**className:AddUserController::> method Name:forgotPwdPage");
		return "forgotPwdPage";
	}

	@RequestMapping(value = "/forgotPwdTest.htm", method = { RequestMethod.GET,
			RequestMethod.POST })
	public @ResponseBody
	String forgotPwdTest(HttpServletRequest request,
			HttpServletResponse response) {
		LOGGER.info("**className:AddUserController::> method Name:forgotPwdTest");
		String message = "";
		String emailName = request.getParameter("emailName");
		User user = null;
		String userType = "forgotPwd";
		String validEmail = null;
		try {
			// server side validation
			if (emailName == null || emailName.isEmpty()) {
				message = "Please enter email";
				return message;
			} else {
				if (emailName.trim().length() > 10) {
						validEmail = emailName.toLowerCase().trim();
						user = changePasswordService.getUserByEmail(validEmail);
						if (user != null) {
							LOGGER.info("//sending email to current email Id *forgotPassword*");
							saveandsendemail(user,
									messageDigestPasswordEncoder, null,
									userType, null);
							message = "We have sent you an email that will allow you to reset your password quickly and easily.";
							return message;
						} else {
							message = "We couldn't find a LiveSpread account associated with <b>"
									+ validEmail + "<b>";
							return message;
						}
				}
			}
		} catch (Exception e) {
			LOGGER.error(
					"Exception in >>>.className:AddUserController >method::forgotPwdTest ::",
					e);
			message = "Multiple account associated with email <b>"
					+ validEmail + "<b>";
		}
		return message;
	}

}
