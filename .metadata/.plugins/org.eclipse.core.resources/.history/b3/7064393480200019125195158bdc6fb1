package com.livespread.controller;

import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.livespread.common.Constant;
import com.livespread.service.NormalizationService;
import com.livespread.service.WorkQueueService;
import com.livespread.util.CipherUtils;
import com.livespread.vta.ZipUtils;
 
@Controller
public class FileDownloadController{
     

	@Autowired
	private WorkQueueService workQueueService;

	
	private Logger LOGGER = Logger.getLogger(FileDownloadController.class);
	@Value("${xmlExcelbatchProcessingPath}")
	private String xmlExcelbatchProcessingPath;
	
	@Value("${XBRLFilePath}")
	private String xbrlFilePath;
	
    /**
     * Size of a byte buffer to read/write file
     */
    private static final int BUFFER_SIZE = 4096;
             
    /**
     * Path of the file to be download, relative to application's directory
     */

     
    /**
     * Method for handling file download request from client
     */
    
    @RequestMapping(value = "/fileDownload.htm", method = {RequestMethod.GET, RequestMethod.POST })
    public void doDownload(HttpServletRequest request,
            HttpServletResponse response) throws IOException {
 
    	

    	try{
    	String fileName=request.getParameter("fileName");
        ServletContext context = request.getServletContext();
        String outputZipFilePath=null;
        String sourceFolderPath=null;

        if(fileName!=null){
         outputZipFilePath=xmlExcelbatchProcessingPath+fileName+".zip";
         sourceFolderPath=xmlExcelbatchProcessingPath+fileName;
        }
        LOGGER.info("source path="+sourceFolderPath);
        LOGGER.info("zip path="+outputZipFilePath);
        
        /**
         * Create zip folder if folder  zip folder is not exist
         */
        File downloadFile = new File(outputZipFilePath).getCanonicalFile();
        
        ZipUtils zipUtils=new ZipUtils(outputZipFilePath, sourceFolderPath);
        zipUtils.generateFileList(new File(sourceFolderPath).getCanonicalFile());
        zipUtils.zipIt(outputZipFilePath);
    	
           
        
        FileInputStream inputStream = new FileInputStream(downloadFile);
         
        // get MIME type of the file
        String mimeType = context.getMimeType(outputZipFilePath);
        if (mimeType == null) {
            // set to binary type if MIME mapping not found
            mimeType = "application/octet-stream";
        }
        System.out.println("MIME type: " + mimeType);
 
        // set content attributes for the response
        response.setContentType(mimeType);
        response.setContentLength((int) downloadFile.length());
 
        // set headers for the response
        String headerKey = "Content-Disposition";
        String headerValue = String.format("attachment; filename=\"%s\"",
                downloadFile.getName());
        response.setHeader(headerKey, headerValue);
 
        // get output stream of the response
        OutputStream outStream = response.getOutputStream();
 
        byte[] buffer = new byte[BUFFER_SIZE];
        int bytesRead = -1;
 
        // write bytes read from the input stream into the output stream
        while ((bytesRead = inputStream.read(buffer)) != -1) {
            outStream.write(buffer, 0, bytesRead);
        }
 
        inputStream.close();
        outStream.close();
        
        downloadFile.delete();
        LOGGER.info("Zip file has been removed!");

     }catch (Exception e) {
		LOGGER.info("Error:",e);
	}
    }
    
    
	@RequestMapping("/downloadXBRLFile.htm")
	public void downloadXBRLFile(@RequestParam("encryptFilingId") String encryptFilingId,HttpServletRequest request,HttpServletResponse response) {

		Integer fillingId =Integer.parseInt(CipherUtils.decrypt(encryptFilingId));
		LOGGER.info("**start downloadXBRLFile filing id:"+fillingId);
		BufferedInputStream in = null;
		ServletOutputStream outputStream = null;
		String filePath=null;
		File fileToDownload=null;
		String fileName="";
		String errMsg="";
		try {

			/**
			 * if filing id exist means request come from Genrate XBRL document button on normalization_view.jsp page
			 * so download XBRLdocument from given path 
			 */
		
		 if(fillingId!=null){
			/**
			 * Here we check latest xml document is created or not based on isXMLGenerate column in work_queue table
			 * if isXMLGenerate is true then you can download the file from destination
			 */
			
			 String xbrlDocStatus=workQueueService.f_getXBRLDocStatus(fillingId);
			 fileName=fillingId+".xbrl";
			 if(xbrlDocStatus!=null)
			 {
				 if(xbrlDocStatus.trim().equalsIgnoreCase("Xbrl_Output_Generated"))
				 { 
					filePath=xbrlFilePath+fillingId+".xbrl";
				    fileToDownload = new File(filePath).getCanonicalFile();
					if(fileToDownload.exists()){
					filePath=xbrlFilePath+fillingId+".xbrl";	
					
					}else{
					filePath=null;
					}
						
				 }else if(xbrlDocStatus.equalsIgnoreCase("Xbrl_Generation_In_Progress")){
				  errMsg="XBRL file generation in progress.";
				 }
			 }else{
				 errMsg="File not exist.";
				 LOGGER.info("file does not exists / generate xml rage call (isNotXMLGenerate false)");

			 }
			 
		  }
		
			if(filePath!=null){
			LOGGER.info("dowonloaded file path="+filePath);

			int fSize = (int) fileToDownload.length();
			in = new BufferedInputStream(new FileInputStream(fileToDownload));
			outputStream = response.getOutputStream();

			response.setBufferSize(fSize);
			response.setContentType("text/xml");
			response.setHeader("Content-Disposition", "attachment; filename="+ fileName);
			response.setContentLength(fSize);
			FileCopyUtils.copy(in, outputStream);
			outputStream.flush();
			}else{
			ByteArrayOutputStream bytes = new ByteArrayOutputStream(1024) ;
			Writer writer = new OutputStreamWriter(bytes, "UTF-8");
			writer.write(Constant.CR+Constant.LF);
			writer.write(Constant.CR+Constant.LF);
            writer.write("File Not Exist:"+filePath) ;
            writer.flush();
            response.setContentLength(bytes.size()) ;
            // Copy
            response.getOutputStream().write(bytes.toByteArray()) ;
				
			}
			
		} catch (IOException e) {
			LOGGER.error("--- Exception Occured --------", e);
		    
			try {
				ByteArrayOutputStream bytes = new ByteArrayOutputStream(1024) ;
				Writer writer = new OutputStreamWriter(bytes, "UTF-8");
				writer.write(Constant.CR+Constant.LF);
				writer.write(Constant.CR+Constant.LF);
	            writer.write("File Not Exist:"+filePath) ;
	            writer.flush();
	            response.setContentLength(bytes.size()) ;
	            // Copy
	            response.getOutputStream().write(bytes.toByteArray()) ;
	            
				throw new Exception("Error performing opreration", e);
			} catch (Exception e1) {
				e1.printStackTrace();
			}
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (outputStream != null) {
					outputStream.close();
				}
			} catch (IOException ioe) {
				LOGGER.error("--- Exception Occured --------", ioe);
				try {
					throw new Exception("Error performing opreration", ioe);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			
		}
		
		
	}
}