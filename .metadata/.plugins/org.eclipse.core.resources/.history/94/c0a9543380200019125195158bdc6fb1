package com.livespread.util;

import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import org.apache.log4j.Logger;

import com.livespread.common.service.CustomContextListener;
import com.livespread.security.AbstractSecureKey;
import com.livespread.security.SecureKeyFactory;

public class JDBCConnection {

	private static Logger LOGGER = Logger.getLogger(JDBCConnection.class);
	 private static JDBCConnection jdbcConnection=null;
	private static  String DB_DRIVER = null;
	private static  String DB_CONNECTION = null;
	private static  String DB_USER = null;
	private static  String DB_PASSWORD = null;
	private static CustomProperties jdbcproperties=null;
	
	 // private constructor restricted to this class itself
    private JDBCConnection()
    {
    	jdbcproperties = new CustomProperties();
		InputStream jdbcin = CustomContextListener.class.getClassLoader().getResourceAsStream("jdbc.properties");
		try {
		jdbcproperties.load(jdbcin);
		} catch (IOException e) {
		 e.printStackTrace();
		}
	  DB_DRIVER = jdbcproperties.getProperty("app.jdbc.driverClassName");
      DB_CONNECTION = jdbcproperties.getProperty("app.jdbc.url");
      DB_USER = jdbcproperties.getProperty("app.jdbc.username");
      DB_PASSWORD = jdbcproperties.getProperty("app.jdbc.password");
    }

	
    private static JDBCConnection JDBCConnection()
    {
        // To ensure only one instance is created
        if (jdbcConnection == null)
        {
        	jdbcConnection = new JDBCConnection();
        }
        return jdbcConnection;
    } 

	 
    public static Connection getDBConnection() {

		JDBCConnection.JDBCConnection();
		
		Connection dbConnection = null;

		try {

			Class.forName(DB_DRIVER);

		} catch (ClassNotFoundException e) {
			e.printStackTrace();
			LOGGER.error("Error:"+e.getMessage());
			}

		try {
			if(DB_PASSWORD!=null && DB_USER!=null){ 
			String decryptedPwd=getDecryptedPwd(DB_PASSWORD);
			dbConnection = DriverManager.getConnection(DB_CONNECTION, DB_USER,decryptedPwd);
			}
			return dbConnection;

		} catch (SQLException e) {
			e.printStackTrace();
			LOGGER.error("Error:"+e.getMessage());
		
		}

		return dbConnection;

	}

	private static String getDecryptedPwd(String DB_PASSWORD) {
		  AbstractSecureKey AESsek = SecureKeyFactory.getInstance(SecureKeyFactory.getDatabaseConnectionSecureKey());
		return AESsek.decryptString(DB_PASSWORD);
	}
    
    
    
}
